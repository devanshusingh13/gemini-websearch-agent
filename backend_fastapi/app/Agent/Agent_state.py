from typing import TypedDict, List, Dict, Optional, Any
from pydantic import BaseModel, Field
from enum import Enum
from langchain_core.messages import BaseMessage, SystemMessage
from datetime import datetime


class GeminiAgentState(BaseModel):
    # Core attributes
    message: Optional[str] = None  # User's query
    tool: Optional[str] = None     # Current tool being used
    tool_query: Optional[str] = None  # Query to pass to tool
    tool_output: Optional[str] = None  # Raw output from tool
    next_tool: Optional[str] = None    # Next tool to use

    # Response related
    llm_response: Optional[str] = None  # LLM's structured response
    response: Optional[str] = None      # Final response to user
    sources: Optional[List[str]] = Field(
        default=None,
        description="List of sources or URLs for the response"
    )
    final_answer: Optional[str] = None
    last_message_type: Optional[str] = None

    # History and tracking
    short_term_memory: List[BaseMessage] = Field(default_factory=list)
    long_term_summaries: List[SystemMessage] = Field(default_factory=list)
    tool_history: Optional[List[dict]] = None

    # Error handling
    error: Optional[str] = None

    # Optional metadata
    user_id: Optional[int] = None
    timestamp: Optional[str] = None

    # Add these new fields
    previous_responses: List[dict] = Field(
        default_factory=list,
        description="Previous responses and tool outputs"
    )
    context_history: Optional[str] = Field(
        default=None,
        description="Accumulated context from previous interactions"
    )

# Output Models as Pydantic BaseModels


class WebSearchOutput(BaseModel):
    search_results: List[str] = Field(
        description="List of search result snippets or titles")
    sources: Optional[List[str]] = Field(
        None, description="URLs or source names")


class WikiSummaryOutput(BaseModel):
    summary: str = Field(description="Summary of Wikipedia article content")
    page_title: Optional[str] = Field(None, description="Wikipedia page title")
    url: Optional[str] = Field(
        None, description="URL to the source Wikipedia page")


class NewsSummaryOutput(BaseModel):
    summary: str = Field(description="Summary of news article or headline")
    sources: Optional[List[str]] = Field(
        None, description="News source names or URLs")


class FinalResponseOutput(BaseModel):
    content: str = Field(description="Final answer generated by the agent")
