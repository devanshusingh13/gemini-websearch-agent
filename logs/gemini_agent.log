2025-05-31 13:44:21,268 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-05-31 13:44:21,752 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-05-31 13:44:21,822 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-05-31 13:44:21,829 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-05-31 14:02:27,806 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-05-31 14:02:28,350 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-05-31 14:02:28,431 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-05-31 14:02:28,439 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 09:20:26,957 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 09:20:27,083 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 09:20:27,103 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 09:20:27,104 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 09:21:16,771 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 09:21:16,851 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 09:21:16,854 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 09:21:16,854 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 09:22:14,808 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 09:22:14,879 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 09:22:14,910 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 09:22:14,910 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 09:22:32,942 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 09:22:33,021 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 09:22:33,044 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 09:22:33,044 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 09:22:44,987 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 09:22:45,067 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 09:22:45,082 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 09:22:45,082 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 09:42:56,122 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 09:42:56,234 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 09:42:56,248 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 09:42:56,249 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 09:59:30,100 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 09:59:30,200 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 09:59:30,214 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 09:59:30,215 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:00:22,488 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:00:22,551 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:00:22,551 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:00:22,566 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:00:35,763 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:00:35,810 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:00:35,810 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:00:35,825 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:00:47,587 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:00:47,634 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:00:47,647 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:00:47,647 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:03:56,194 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:03:56,330 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:03:56,340 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:03:56,341 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:04:10,608 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:04:10,688 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:04:10,697 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:04:10,699 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:11:50,547 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:11:50,613 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:11:50,619 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:11:50,620 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:12:03,281 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:12:03,360 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:12:03,364 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:12:03,365 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:13:15,853 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:13:15,927 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:13:15,942 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:13:15,942 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:14:03,546 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:14:03,609 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:14:03,615 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:14:03,616 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:14:20,380 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:14:20,436 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:14:20,436 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:14:20,436 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:15:55,263 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:15:55,333 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:15:55,343 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:15:55,343 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:17:10,565 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:17:10,622 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:17:10,626 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:17:10,627 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:18:22,227 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:18:22,305 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:18:22,311 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:18:22,312 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:18:33,615 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:18:33,684 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:18:33,694 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:18:33,695 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:19:23,188 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:19:23,246 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:19:23,262 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:19:23,262 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:19:35,583 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:19:35,631 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:19:35,631 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:19:35,647 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:21:03,366 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:21:03,431 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:21:03,437 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:21:03,438 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:21:16,499 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:21:16,560 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:21:16,565 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:21:16,566 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:21:53,065 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:21:53,128 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:21:53,144 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:21:53,144 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:22:24,969 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:22:25,031 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:22:25,031 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:22:25,031 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:23:44,607 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:23:44,672 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:23:44,680 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:23:44,681 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:23:56,801 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:23:56,862 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:23:56,869 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:23:56,870 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:25:27,932 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:25:27,997 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:25:28,003 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:25:28,004 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:26:49,439 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:26:49,492 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:26:49,498 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:26:49,499 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:27:01,695 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:27:01,756 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:27:01,766 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:27:01,767 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:27:21,533 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:27:21,587 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:27:21,595 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:27:21,596 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:27:53,616 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:27:53,682 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:27:53,687 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:27:53,687 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:31:44,390 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:31:44,446 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:31:44,452 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:31:44,453 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:31:57,440 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:31:57,506 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:31:57,515 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:31:57,515 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:32:08,765 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:32:08,820 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:32:08,829 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:32:08,830 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:33:07,191 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:33:07,250 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:33:07,266 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:33:07,266 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:33:44,463 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:33:44,512 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:33:44,527 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:33:44,527 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:34:19,769 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:34:19,815 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:34:19,831 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:34:19,831 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:39:02,008 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:39:02,077 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:39:02,091 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:39:02,091 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:39:32,178 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:39:32,243 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:39:32,249 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:39:32,250 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:40:15,555 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:40:15,599 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:40:15,599 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:40:15,599 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:40:27,551 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:40:27,610 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:40:27,610 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:40:27,610 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:41:01,656 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:41:01,718 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:41:01,722 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:41:01,723 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:41:14,158 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:41:14,222 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:41:14,227 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:41:14,228 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:41:48,030 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:41:48,085 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:41:48,090 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:41:48,090 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:42:02,788 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:42:02,840 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:42:02,844 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:42:02,845 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:43:51,245 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:43:51,318 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:43:51,325 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:43:51,326 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:44:03,617 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:44:03,673 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:44:03,673 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:44:03,673 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:48:01,093 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:48:01,228 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:48:01,251 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:48:01,252 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:48:14,998 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:48:15,063 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:48:15,071 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:48:15,072 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:49:00,170 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:49:00,239 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:49:00,246 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:49:00,253 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:49:11,255 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:49:11,330 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:49:11,330 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:49:11,330 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:54:27,658 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:54:27,763 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:54:27,777 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:54:27,779 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:54:42,415 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:54:42,477 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:54:42,482 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:54:42,483 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:54:53,935 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:54:53,995 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:54:54,002 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:54:54,002 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:55:05,569 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:55:05,627 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:55:05,632 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:55:05,633 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:57:05,498 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:57:05,569 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:57:05,582 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:57:05,583 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:57:18,288 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:57:18,357 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:57:18,368 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:57:18,371 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:57:36,239 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:57:36,312 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:57:36,321 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:57:36,322 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:57:52,743 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:57:52,867 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:57:52,885 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:57:52,887 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 10:58:07,038 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 10:58:07,101 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 10:58:07,108 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 10:58:07,108 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:00:50,492 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:00:50,646 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:00:50,662 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:00:50,664 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:01:04,011 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:01:04,083 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:01:04,093 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:01:04,094 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:02:04,354 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:02:04,415 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:02:04,419 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:02:04,420 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:02:20,264 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:02:20,332 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:02:20,339 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:02:20,340 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:02:38,474 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:02:38,554 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:02:38,558 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:02:38,559 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:03:47,134 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:03:47,216 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:03:47,229 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:03:47,230 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:03:59,073 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:03:59,161 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:03:59,177 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:03:59,178 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:04:12,529 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:04:12,593 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:04:12,598 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:04:12,599 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:04:24,246 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:04:24,323 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:04:24,332 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:04:24,333 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:04:36,275 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:04:36,336 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:04:36,341 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:04:36,342 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:05:16,941 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:05:16,995 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:05:16,995 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:05:16,995 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:06:59,457 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:06:59,520 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:06:59,536 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:06:59,552 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:07:11,448 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:07:11,501 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:07:11,513 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:07:11,513 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:07:23,192 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:07:23,263 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:07:23,263 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:07:23,263 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:08:39,984 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:08:40,055 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:08:40,062 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:08:40,063 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:08:51,207 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:08:51,271 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:08:51,275 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:08:51,277 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:09:04,447 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:09:04,518 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:09:04,533 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:09:04,534 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:09:16,698 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:09:16,768 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:09:16,778 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:09:16,779 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:09:29,153 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:09:29,217 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:09:29,224 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:09:29,225 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:09:54,586 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:09:54,662 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:09:54,667 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:09:54,668 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:10:09,910 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:10:09,985 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:10:09,989 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:10:09,991 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:10:22,500 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:10:22,575 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:10:22,583 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:10:22,584 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:10:35,443 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:10:35,531 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:10:35,543 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:10:35,545 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:10:49,171 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:10:49,237 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:10:49,243 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:10:49,244 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:11:51,751 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:11:51,813 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:11:51,820 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:11:51,821 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:12:03,103 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:12:03,162 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:12:03,168 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:12:03,169 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:22:51,349 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:22:51,448 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:22:51,459 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:22:51,460 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:23:04,916 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:23:04,989 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:23:04,993 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:23:04,994 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:23:18,194 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:23:18,261 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:23:18,265 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:23:18,266 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:25:58,377 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:25:58,447 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:25:58,456 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:25:58,458 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:26:16,856 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:26:16,918 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:26:16,925 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:26:16,926 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:26:29,497 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:26:29,560 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:26:29,564 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:26:29,565 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:26:48,709 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:26:48,772 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:26:48,788 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:26:48,788 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:29:07,048 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:29:07,115 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:29:07,125 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:29:07,126 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:30:30,232 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:30:30,313 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:30:30,325 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:30:30,326 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:30:45,631 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:30:45,705 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:30:45,710 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:30:45,711 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:30:58,181 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:30:58,258 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:30:58,270 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:30:58,271 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:31:09,685 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:31:09,756 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:31:09,765 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:31:09,767 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:31:20,687 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:31:20,755 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:31:20,759 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:31:20,760 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:31:33,687 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:31:33,751 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:31:33,751 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:31:33,751 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:32:23,423 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:32:23,488 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:32:23,493 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:32:23,494 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:43:56,723 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:43:56,808 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:43:56,818 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:43:56,819 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:45:20,962 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:45:21,048 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:45:21,053 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:45:21,054 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:45:59,756 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:45:59,819 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:45:59,834 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:45:59,834 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:46:12,197 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:46:12,259 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:46:12,259 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:46:12,259 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 11:46:23,281 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 11:46:23,342 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 11:46:23,342 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 11:46:23,342 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 17:52:17,311 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 17:52:17,780 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 17:52:17,859 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 17:52:17,865 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 17:54:25,928 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 17:54:26,277 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 17:54:26,304 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 17:54:26,309 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 17:55:03,423 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 17:55:03,697 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 17:55:03,726 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 17:55:03,733 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 18:04:47,617 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 18:04:48,095 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 18:04:48,142 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 18:04:48,148 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 18:05:29,923 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 18:05:30,222 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 18:05:30,262 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 18:05:30,269 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 18:06:12,714 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 18:06:13,020 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 18:06:13,060 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 18:06:13,070 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 18:06:53,777 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 18:06:54,108 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 18:06:54,141 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 18:06:54,147 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 18:09:09,412 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 18:09:09,731 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 18:09:09,764 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 18:09:09,770 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 18:09:48,742 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 18:09:49,034 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 18:09:49,077 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 18:09:49,083 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 18:12:24,875 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 18:12:25,335 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 18:12:25,470 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 18:12:25,476 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 18:13:01,354 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 18:13:01,667 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 18:13:01,775 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 18:13:01,782 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 18:14:56,252 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 18:14:56,562 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 18:14:56,591 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 18:14:56,599 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 18:15:34,760 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 18:15:35,062 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 18:15:35,097 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 18:15:35,103 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-01 18:22:42,939 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-01 18:22:43,319 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-01 18:22:43,364 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-01 18:22:43,364 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 13:42:33,693 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 13:42:33,798 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 13:42:33,809 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 13:42:33,810 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 18:09:00,666 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 18:09:01,291 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 18:09:01,389 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 18:09:01,389 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 18:10:14,058 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 18:10:14,345 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 18:10:14,377 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 18:10:14,382 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 18:10:55,995 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 18:10:56,272 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 18:10:56,303 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 18:10:56,309 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 18:11:55,410 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 18:11:55,773 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 18:11:55,864 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 18:11:55,870 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 18:25:38,250 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 18:25:38,783 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 18:25:38,872 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 18:25:38,878 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 18:32:25,101 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 18:32:25,904 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 18:32:26,073 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 18:32:26,080 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 18:34:01,266 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 18:34:01,668 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 18:34:01,726 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 18:34:01,733 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 18:34:41,935 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 18:34:42,221 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 18:34:42,257 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 18:34:42,262 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 18:46:58,688 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 18:46:59,215 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 18:46:59,293 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 18:46:59,296 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 18:48:57,574 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 18:48:57,847 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 18:48:57,872 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 18:48:57,878 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 18:51:27,022 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 18:51:27,324 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 18:51:27,408 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 18:51:27,408 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 18:57:19,841 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 18:57:20,266 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 18:57:20,356 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 18:57:20,362 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 19:05:25,849 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 19:05:25,960 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 19:05:25,978 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 19:05:25,983 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 19:06:49,630 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 19:06:49,752 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 19:06:49,769 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 19:06:49,772 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 19:07:06,714 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 19:07:06,826 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 19:07:06,836 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 19:07:06,841 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 19:12:31,579 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 19:12:31,743 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 19:12:31,768 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 19:12:31,771 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 19:13:07,190 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 19:13:07,313 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 19:13:07,345 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 19:13:07,348 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 19:14:00,764 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 19:14:00,915 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 19:14:00,942 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 19:14:00,947 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 19:14:15,485 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 19:14:15,612 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 19:14:15,627 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 19:14:15,632 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 19:14:51,109 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 19:14:51,252 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 19:14:51,266 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 19:14:51,269 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 19:15:05,026 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 19:15:05,152 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 19:15:05,168 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 19:15:05,172 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 19:23:49,600 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 19:23:49,766 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 19:23:49,790 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 19:23:49,793 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 19:36:17,585 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 19:36:17,833 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 19:36:17,874 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 19:36:17,878 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 19:39:52,294 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 19:39:52,452 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 19:39:52,475 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 19:39:52,478 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 19:42:53,160 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 19:42:53,288 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 19:42:53,301 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 19:42:53,304 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 19:44:59,795 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 19:44:59,921 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 19:44:59,943 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 19:44:59,943 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 19:45:12,161 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 19:45:12,161 - ERROR - Agentmain.py:406 - Error in chat flow execution: 'Agent' object has no attribute 'get_conversation_context'
2025-06-02 19:45:12,164 - INFO - Agentmain.py:618 - Final response node reached.
2025-06-02 19:45:14,079 - INFO - Agentmain.py:678 - Generated final response: Hello, it's nice to meet you. I'm here to help with any questions or topics you'd like to discuss. Unfortunately, I don't have any additional information to provide at this time, as no specific query was asked and no relevant information was gathered. If you have a particular question or topic in mind, please feel free to ask, and I'll do my best to provide a helpful and accurate response.
2025-06-02 19:55:01,745 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 19:55:01,746 - ERROR - Agentmain.py:406 - Error in chat flow execution: 'Agent' object has no attribute 'get_conversation_context'
2025-06-02 19:55:01,751 - INFO - Agentmain.py:618 - Final response node reached.
2025-06-02 19:55:02,334 - INFO - Agentmain.py:678 - Generated final response: Hello Devanshu Singh, it's nice to meet you. I don't have any additional information about you, so I'd love to learn more. Is there something specific you'd like to know or discuss?
2025-06-02 19:55:26,755 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 19:55:26,756 - ERROR - Agentmain.py:406 - Error in chat flow execution: 'Agent' object has no attribute 'get_conversation_context'
2025-06-02 19:55:26,757 - INFO - Agentmain.py:618 - Final response node reached.
2025-06-02 19:55:28,479 - INFO - Agentmain.py:678 - Generated final response: The Mahabharat is an ancient Indian epic that tells the story of the Pandavas and the Kauravas, two groups of cousins who engage in a great war. It is one of the most important works of Hindu literature and is considered a key text of Hinduism. The epic is attributed to the sage Vyasa and is believed to have been composed over several centuries. It contains 18 books and over 100,000 shlokas, or couplets, and explores themes such as duty, honor, and the nature of reality. Unfortunately, I couldn't find more specific information on the topic, and I would recommend consulting a reliable source, such as a scholarly article or a reputable online encyclopedia, for more detailed information.
2025-06-02 20:00:50,048 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 20:00:50,262 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 20:00:50,306 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 20:00:50,311 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 20:01:09,569 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:01:09,569 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:01:09,603 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:01:09,604 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:01:11,181 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="Hello again! It's nice to meet you too. Is there something specific you'd like to know or discuss?" sources=None
2025-06-02 20:01:11,181 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="Hello again! It's nice to meet you too. Is there something specific you'd like to know or discuss?" sources=None
2025-06-02 20:01:11,183 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-02 20:01:11,222 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-02 20:01:11,222 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="Hello again! It's nice to meet you too. Is there something specific you'd like to know or discuss?" sources=None
2025-06-02 20:02:57,312 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 20:02:57,435 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 20:02:57,447 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 20:02:57,451 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 20:03:17,312 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:03:17,313 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:03:17,346 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:03:17,346 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:03:18,413 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="You previously asked about Ferrari. To recap, Ferrari is an Italian luxury sports car manufacturer based in Maranello, Italy. Founded by Enzo Ferrari in 1939, the company is known for its high-performance vehicles, including the iconic 250 GTO and F40 models. Ferrari has a rich history in racing, particularly in Formula One, where it has won numerous championships. The company has also expanded into other areas, such as fashion and entertainment. If you'd like more specific information about Ferrari, please let me know." sources=None
2025-06-02 20:03:18,413 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="You previously asked about Ferrari. To recap, Ferrari is an Italian luxury sports car manufacturer based in Maranello, Italy. Founded by Enzo Ferrari in 1939, the company is known for its high-performance vehicles, including the iconic 250 GTO and F40 models. Ferrari has a rich history in racing, particularly in Formula One, where it has won numerous championships. The company has also expanded into other areas, such as fashion and entertainment. If you'd like more specific information about Ferrari, please let me know." sources=None
2025-06-02 20:03:18,414 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-02 20:03:18,472 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-02 20:03:18,472 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="You previously asked about Ferrari. To recap, Ferrari is an Italian luxury sports car manufacturer based in Maranello, Italy. Founded by Enzo Ferrari in 1939, the company is known for its high-performance vehicles, including the iconic 250 GTO and F40 models. Ferrari has a rich history in racing, particularly in Formula One, where it has won numerous championships. The company has also expanded into other areas, such as fashion and entertainment. If you'd like more specific information about Ferrari, please let me know." sources=None
2025-06-02 20:04:15,537 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:04:15,537 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:04:15,566 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:04:15,567 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:04:16,151 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="I apologize, but I couldn't find any previous query or topic to provide more information about. Could you please provide more context or clarify what you would like to know more about?" sources=None
2025-06-02 20:04:16,152 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="I apologize, but I couldn't find any previous query or topic to provide more information about. Could you please provide more context or clarify what you would like to know more about?" sources=None
2025-06-02 20:04:16,152 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-02 20:04:16,187 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-02 20:04:16,187 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="I apologize, but I couldn't find any previous query or topic to provide more information about. Could you please provide more context or clarify what you would like to know more about?" sources=None
2025-06-02 20:04:41,595 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:04:41,596 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:04:41,628 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:04:41,629 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:04:42,212 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='news' tool_query='India news today' response=None sources=None
2025-06-02 20:04:42,213 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='news' tool_query='India news today' response=None sources=None
2025-06-02 20:04:42,213 - INFO - Agentmain.py:400 - Decided next tool: news
2025-06-02 20:04:42,216 - INFO - Agentmain.py:495 - Entered News Summary Node
2025-06-02 20:04:47,533 - INFO - Agentmain.py:533 - Structured News summary: summary='announcement of their plans to build an industry-leading partnership connecting India with Europe and North America, in New Delhi, Sunday, June 1, 2025. ") [...] Doraiswami on India–U.K. bilateral relations during their visit for Operation Sindoor Global Outreach, in London on Sunday (June 1, 2025). ") [...] ### [**As the NDA’s allies in Bihar posture over seat sharing, the BJP plans its strategy**](https://www.thehindu.com/news/national/as-the-ndas-allies-in-bihar-posture-over-seat-sharing-the-bjp-plans-its-strategy/article69648703.ece)\n\n### [**India offers an excellent opportunity for investment in aviation sector: PM Modi**](https://www.thehindu.com/business/Industry/prime-minister-narendra-modi-addresses-the-agm-of-international-air-transport-association/article69649030.ece)\nIndia Today TV is India\'s leading English News Channel. India Today YouTube channel offers latest news videos on Politics, Business, Cricket, Bollywood,\n![Freestyle Chess Grand Slam Tour in Paris](https://www.reuters.com/resizer/v2/WVV7LUE7HBKBPOQZHTYBBYQTLE.jpg?auth=36bb985384f602750aea6931e45c9b52714706983ef83d2a055d4c16819b4320&width=960&quality=80)\n![A worker unload steel bars in a steel godown on the outskirts of Ahmedabad](https://www.reuters.com/resizer/v2/A7ZTBHIWEJMXFC7RITFMXO436Q.jpg?auth=eebabb4c272b4b3197dc30760fbfb2af086327138da7c4fdc6dac81f1d04beba&width=960&quality=80) [...] Rural consumption is poised to remain a bright spot in the Indian economy, supporting growth in the ongoing fiscal year, economists said after fourth-quarter GDP growth beat estimates. [...] ![Men walk past a screen displaying market results outside the Bombay Stock Exchange (BSE) in Mumbai](https://www.reuters.com/resizer/v2/WYXPYGO5ERKP5OBAG4RQ5D5F7Y.jpg?auth=8f993961eafe73e28ba9e6975e02075585b6b2fe98dda1b5b4169f4f26716224&width=960&quality=80)\n![IISS Shangri-La Dialogue security summit in Singapore](https://www.reuters.com/resizer/v2/QRUUR6BD2VPT3D6X5MNNJCKI5Q.jpg?auth=198c0a9e3dd1f08ee1f7f7f0f12d1f1ab0ad00fdb33786892d246e6d41839487&width=960&quality=80)\n![](https://akm-img-a-in.tosshub.com/indiatoday/2025-05/Newstoday.jpg?VersionId=iO2cR1BKs7BRKss.zqHTel6xldzgJFl0&size=240:135)\n\n#### [Monday to Friday at 09:00 pm](/programmes/news-today "News Today")\n\n![](https://akm-img-a-in.tosshub.com/indiatoday/2025-04/5live_End_frame_Gaurav.jpg?VersionId=E17W1vqp_byAk_cWAr6CsEOE.lg2wCFU&size=240:135)\n\n#### [Monday to Friday at 05:00 pm](/programmes/5ive-live "5ive Live")\n\n## WHAT’S HAPPENING IN\n\n## [Videos](/videos "Videos") [...] | Teams | PLD | WIN | NRR | PTS |\n| --- | --- | --- | --- | --- |\n| [PBKS(Q)](https://www.indiatoday.in/sports/ipl/punjab-1107) | 14 | 9 | +0.372 | 19 |\n| [RCB(Q)](https://www.indiatoday.in/sports/ipl/bangalore-1105) | 14 | 9 | +0.301 | 19 |\n| [GT(Q)](https://www.indiatoday.in/sports/ipl/gujarat-2955) | 14 | 9 | +0.254 | 18 |\n| [MI(Q)](https://www.indiatoday.in/sports/ipl/mumbai-1111) | 14 | 8 | +1.142 | 16 |\n\n#### India News\n![today epaper widget]( https://indianexpress.com/wp-content/themes/indianexpress/images/default-ie.jpg )\n\n**Read today\'s print editions**\n\n## [Opinion](/section/opinion/)\n\n### [GDP figures show India is back on the road to growth](https://indianexpress.com/article/opinion/columns/gdp-figures-show-india-is-back-on-the-road-to-growth-10042653/) [...] #### [June 2 sees 44 fresh COVID cases in West Bengal — bringing total to 331](https://indianexpress.com/article/cities/kolkata/covid-cases-in-west-bengal-total-331-10043886/)\n\n#### [Sikkim landslides: 3 soldiers killed, 6 missing; over 1,600 tourists evacuated](https://indianexpress.com/article/cities/kolkata/sikkim-landslides-3-soldiers-killed-6-missing-over-1600-tourists-evacuated-10043896/) [...] ![Crackdown against illegal immigrants has to follow due process](//images.indianexpress.com/2025/06/express-view-Copy.jpg?w=210)\n![AIIMS study highlights urgent need for coordinated action on childhood obesity](//images.indianexpress.com/2025/06/express-view.jpg?w=210)' sources=['https://www.thehindu.com/news/national/', 'https://www.youtube.com/channel/UCYPvAwZP8pZhSMW8qs7cVCw', 'https://www.reuters.com/world/india/', 'https://www.indiatoday.in/', 'https://indianexpress.com/']
2025-06-02 20:04:47,536 - INFO - Agentmain.py:537 - News summary retrieved: 3984 chars
2025-06-02 20:04:47,537 - INFO - Agentmain.py:561 - Exiting News Summary Node
2025-06-02 20:04:47,560 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:04:47,560 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:04:47,590 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:04:47,590 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:04:47,592 - INFO - Agentmain.py:262 - Message to LLM: 
You are an AI assistant that helps summarize news information.

The following content has been retrieved in response to a user's query. Your task is to analyze this content and generate a clear, concise, and factual answer in 2-3 sentences that directly addresses the user's query.

If the content is not relevant or no summary can be made, respond with: "No recent news could be found."

IMPORTANT:
- Your output must be a single JSON object with keys: "tool", "tool_query", and "response".
- Set "tool" to "end".
- Set "tool_query" to null.
- Write your answer in the "response" field.
- Optionally, fill "sources" with any relevant URLs or citations.
- **Do NOT include any comments, explanations, or extra text. Only output the JSON object.**

Previous assistant response: tool='news' tool_query='India news today' response=None sources=None

News content: announcement of their plans to build an industry-leading partnership connecting India with Europe and North America, in New Delhi, Sunday, June 1, 2025. ") [...] Doraiswami on India–U.K. bilateral relations during their visit for Operation Sindoor Global Outreach, in London on Sunday (June 1, 2025). ") [...] ### [**As the NDA’s allies in Bihar posture over seat sharing, the BJP plans its strategy**](https://www.thehindu.com/news/national/as-the-ndas-allies-in-bihar-posture-over-seat-sharing-the-bjp-plans-its-strategy/article69648703.ece)

### [**India offers an excellent opportunity for investment in aviation sector: PM Modi**](https://www.thehindu.com/business/Industry/prime-minister-narendra-modi-addresses-the-agm-of-international-air-transport-association/article69649030.ece)
India Today TV is India's leading English News Channel. India Today YouTube channel offers latest news videos on Politics, Business, Cricket, Bollywood,
![Freestyle Chess Grand Slam Tour in Paris](https://www.reuters.com/resizer/v2/WVV7LUE7HBKBPOQZHTYBBYQTLE.jpg?auth=36bb985384f602750aea6931e45c9b52714706983ef83d2a055d4c16819b4320&width=960&quality=80)
![A worker unload steel bars in a steel godown on the outskirts of Ahmedabad](https://www.reuters.com/resizer/v2/A7ZTBHIWEJMXFC7RITFMXO436Q.jpg?auth=eebabb4c272b4b3197dc30760fbfb2af086327138da7c4fdc6dac81f1d04beba&width=960&quality=80) [...] Rural consumption is poised to remain a bright spot in the Indian economy, supporting growth in the ongoing fiscal year, economists said after fourth-quarter GDP growth beat estimates. [...] ![Men walk past a screen displaying market results outside the Bombay Stock Exchange (BSE) in Mumbai](https://www.reuters.com/resizer/v2/WYXPYGO5ERKP5OBAG4RQ5D5F7Y.jpg?auth=8f993961eafe73e28ba9e6975e02075585b6b2fe98dda1b5b4169f4f26716224&width=960&quality=80)
![IISS Shangri-La Dialogue security summit in Singapore](https://www.reuters.com/resizer/v2/QRUUR6BD2VPT3D6X5MNNJCKI5Q.jpg?auth=198c0a9e3dd1f08ee1f7f7f0f12d1f1ab0ad00fdb33786892d246e6d41839487&width=960&quality=80)
![](https://akm-img-a-in.tosshub.com/indiatoday/2025-05/Newstoday.jpg?VersionId=iO2cR1BKs7BRKss.zqHTel6xldzgJFl0&size=240:135)

#### [Monday to Friday at 09:00 pm](/programmes/news-today "News Today")

![](https://akm-img-a-in.tosshub.com/indiatoday/2025-04/5live_End_frame_Gaurav.jpg?VersionId=E17W1vqp_byAk_cWAr6CsEOE.lg2wCFU&size=240:135)

#### [Monday to Friday at 05:00 pm](/programmes/5ive-live "5ive Live")

## WHAT’S HAPPENING IN

## [Videos](/videos "Videos") [...] | Teams | PLD | WIN | NRR | PTS |
| --- | --- | --- | --- | --- |
| [PBKS(Q)](https://www.indiatoday.in/sports/ipl/punjab-1107) | 14 | 9 | +0.372 | 19 |
| [RCB(Q)](https://www.indiatoday.in/sports/ipl/bangalore-1105) | 14 | 9 | +0.301 | 19 |
| [GT(Q)](https://www.indiatoday.in/sports/ipl/gujarat-2955) | 14 | 9 | +0.254 | 18 |
| [MI(Q)](https://www.indiatoday.in/sports/ipl/mumbai-1111) | 14 | 8 | +1.142 | 16 |

#### India News
![today epaper widget]( https://indianexpress.com/wp-content/themes/indianexpress/images/default-ie.jpg )

**Read today's print editions**

## [Opinion](/section/opinion/)

### [GDP figures show India is back on the road to growth](https://indianexpress.com/article/opinion/columns/gdp-figures-show-india-is-back-on-the-road-to-growth-10042653/) [...] #### [June 2 sees 44 fresh COVID cases in West Bengal — bringing total to 331](https://indianexpress.com/article/cities/kolkata/covid-cases-in-west-bengal-total-331-10043886/)

#### [Sikkim landslides: 3 soldiers killed, 6 missing; over 1,600 tourists evacuated](https://indianexpress.com/article/cities/kolkata/sikkim-landslides-3-soldiers-killed-6-missing-over-1600-tourists-evacuated-10043896/) [...] ![Crackdown against illegal immigrants has to follow due process](//images.indianexpress.com/2025/06/express-view-Copy.jpg?w=210)
![AIIMS study highlights urgent need for coordinated action on childhood obesity](//images.indianexpress.com/2025/06/express-view.jpg?w=210)

2025-06-02 20:04:48,815 - INFO - Agentmain.py:265 - Structured response from LLM: tool='end' tool_query=None response="India's economy is showing signs of growth, with rural consumption expected to remain a bright spot, and the country is also witnessing significant developments in various sectors, including aviation and industry partnerships. Prime Minister Narendra Modi has highlighted the opportunities for investment in the aviation sector. Additionally, the country is dealing with issues such as landslides in Sikkim and COVID-19 cases in West Bengal." sources=['https://www.thehindu.com/news/national/as-the-ndas-allies-in-bihar-posture-over-seat-sharing-the-bjp-plans-its-strategy/article69648703.ece', 'https://www.thehindu.com/business/Industry/prime-minister-narendra-modi-addresses-the-agm-of-international-air-transport-association/article69649030.ece', 'https://indianexpress.com/article/opinion/columns/gdp-figures-show-india-is-back-on-the-road-to-growth-10042653/']
2025-06-02 20:04:48,858 - INFO - Agentmain.py:397 - Handled tool response for end
2025-06-02 20:04:48,944 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-02 20:04:48,944 - INFO - Agentmain.py:648 - Using LLM-provided final response: India's economy is showing signs of growth, with rural consumption expected to remain a bright spot, and the country is also witnessing significant developments in various sectors, including aviation and industry partnerships. Prime Minister Narendra Modi has highlighted the opportunities for investment in the aviation sector. Additionally, the country is dealing with issues such as landslides in Sikkim and COVID-19 cases in West Bengal.
2025-06-02 20:05:40,676 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 20:05:40,799 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 20:05:40,818 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 20:05:40,823 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 20:05:43,022 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:05:43,023 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:05:43,052 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:05:43,052 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:05:43,641 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='news' tool_query='India news today' response=None sources=None
2025-06-02 20:05:43,642 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='news' tool_query='India news today' response=None sources=None
2025-06-02 20:05:43,642 - INFO - Agentmain.py:400 - Decided next tool: news
2025-06-02 20:05:43,645 - INFO - Agentmain.py:495 - Entered News Summary Node
2025-06-02 20:05:47,496 - INFO - Agentmain.py:533 - Structured News summary: summary='announcement of their plans to build an industry-leading partnership connecting India with Europe and North America, in New Delhi, Sunday, June 1, 2025. ") [...] Doraiswami on India–U.K. bilateral relations during their visit for Operation Sindoor Global Outreach, in London on Sunday (June 1, 2025). ") [...] ### [**As the NDA’s allies in Bihar posture over seat sharing, the BJP plans its strategy**](https://www.thehindu.com/news/national/as-the-ndas-allies-in-bihar-posture-over-seat-sharing-the-bjp-plans-its-strategy/article69648703.ece)\n\n### [**India offers an excellent opportunity for investment in aviation sector: PM Modi**](https://www.thehindu.com/business/Industry/prime-minister-narendra-modi-addresses-the-agm-of-international-air-transport-association/article69649030.ece)\nIndia Today TV is India\'s leading English News Channel. India Today YouTube channel offers latest news videos on Politics, Business, Cricket, Bollywood,\n![Freestyle Chess Grand Slam Tour in Paris](https://www.reuters.com/resizer/v2/WVV7LUE7HBKBPOQZHTYBBYQTLE.jpg?auth=36bb985384f602750aea6931e45c9b52714706983ef83d2a055d4c16819b4320&width=960&quality=80)\n![A worker unload steel bars in a steel godown on the outskirts of Ahmedabad](https://www.reuters.com/resizer/v2/A7ZTBHIWEJMXFC7RITFMXO436Q.jpg?auth=eebabb4c272b4b3197dc30760fbfb2af086327138da7c4fdc6dac81f1d04beba&width=960&quality=80) [...] Rural consumption is poised to remain a bright spot in the Indian economy, supporting growth in the ongoing fiscal year, economists said after fourth-quarter GDP growth beat estimates. [...] ![Men walk past a screen displaying market results outside the Bombay Stock Exchange (BSE) in Mumbai](https://www.reuters.com/resizer/v2/WYXPYGO5ERKP5OBAG4RQ5D5F7Y.jpg?auth=8f993961eafe73e28ba9e6975e02075585b6b2fe98dda1b5b4169f4f26716224&width=960&quality=80)\n![IISS Shangri-La Dialogue security summit in Singapore](https://www.reuters.com/resizer/v2/QRUUR6BD2VPT3D6X5MNNJCKI5Q.jpg?auth=198c0a9e3dd1f08ee1f7f7f0f12d1f1ab0ad00fdb33786892d246e6d41839487&width=960&quality=80)\n![](https://akm-img-a-in.tosshub.com/indiatoday/2025-05/Newstoday.jpg?VersionId=iO2cR1BKs7BRKss.zqHTel6xldzgJFl0&size=240:135)\n\n#### [Monday to Friday at 09:00 pm](/programmes/news-today "News Today")\n\n![](https://akm-img-a-in.tosshub.com/indiatoday/2025-04/5live_End_frame_Gaurav.jpg?VersionId=E17W1vqp_byAk_cWAr6CsEOE.lg2wCFU&size=240:135)\n\n#### [Monday to Friday at 05:00 pm](/programmes/5ive-live "5ive Live")\n\n## WHAT’S HAPPENING IN\n\n## [Videos](/videos "Videos") [...] | Teams | PLD | WIN | NRR | PTS |\n| --- | --- | --- | --- | --- |\n| [PBKS(Q)](https://www.indiatoday.in/sports/ipl/punjab-1107) | 14 | 9 | +0.372 | 19 |\n| [RCB(Q)](https://www.indiatoday.in/sports/ipl/bangalore-1105) | 14 | 9 | +0.301 | 19 |\n| [GT(Q)](https://www.indiatoday.in/sports/ipl/gujarat-2955) | 14 | 9 | +0.254 | 18 |\n| [MI(Q)](https://www.indiatoday.in/sports/ipl/mumbai-1111) | 14 | 8 | +1.142 | 16 |\n\n#### India News\n![today epaper widget]( https://indianexpress.com/wp-content/themes/indianexpress/images/default-ie.jpg )\n\n**Read today\'s print editions**\n\n## [Opinion](/section/opinion/)\n\n### [GDP figures show India is back on the road to growth](https://indianexpress.com/article/opinion/columns/gdp-figures-show-india-is-back-on-the-road-to-growth-10042653/) [...] #### [June 2 sees 44 fresh COVID cases in West Bengal — bringing total to 331](https://indianexpress.com/article/cities/kolkata/covid-cases-in-west-bengal-total-331-10043886/)\n\n#### [Sikkim landslides: 3 soldiers killed, 6 missing; over 1,600 tourists evacuated](https://indianexpress.com/article/cities/kolkata/sikkim-landslides-3-soldiers-killed-6-missing-over-1600-tourists-evacuated-10043896/) [...] ![Crackdown against illegal immigrants has to follow due process](//images.indianexpress.com/2025/06/express-view-Copy.jpg?w=210)\n![AIIMS study highlights urgent need for coordinated action on childhood obesity](//images.indianexpress.com/2025/06/express-view.jpg?w=210)' sources=['https://www.thehindu.com/news/national/', 'https://www.youtube.com/channel/UCYPvAwZP8pZhSMW8qs7cVCw', 'https://www.reuters.com/world/india/', 'https://www.indiatoday.in/', 'https://indianexpress.com/']
2025-06-02 20:05:47,497 - INFO - Agentmain.py:537 - News summary retrieved: 3984 chars
2025-06-02 20:05:47,498 - INFO - Agentmain.py:561 - Exiting News Summary Node
2025-06-02 20:05:47,517 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:05:47,517 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:05:47,545 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:05:47,545 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:05:47,547 - INFO - Agentmain.py:262 - Message to LLM: 
You are an AI assistant that helps summarize news information.

The following content has been retrieved in response to a user's query. Your task is to analyze this content and generate a clear, concise, and factual answer in 2-3 sentences that directly addresses the user's query.

If the content is not relevant or no summary can be made, respond with: "No recent news could be found."

IMPORTANT:
- Your output must be a single JSON object with keys: "tool", "tool_query", and "response".
- Set "tool" to "end".
- Set "tool_query" to null.
- Write your answer in the "response" field.
- Optionally, fill "sources" with any relevant URLs or citations.
- **Do NOT include any comments, explanations, or extra text. Only output the JSON object.**

Previous assistant response: tool='news' tool_query='India news today' response=None sources=None

News content: announcement of their plans to build an industry-leading partnership connecting India with Europe and North America, in New Delhi, Sunday, June 1, 2025. ") [...] Doraiswami on India–U.K. bilateral relations during their visit for Operation Sindoor Global Outreach, in London on Sunday (June 1, 2025). ") [...] ### [**As the NDA’s allies in Bihar posture over seat sharing, the BJP plans its strategy**](https://www.thehindu.com/news/national/as-the-ndas-allies-in-bihar-posture-over-seat-sharing-the-bjp-plans-its-strategy/article69648703.ece)

### [**India offers an excellent opportunity for investment in aviation sector: PM Modi**](https://www.thehindu.com/business/Industry/prime-minister-narendra-modi-addresses-the-agm-of-international-air-transport-association/article69649030.ece)
India Today TV is India's leading English News Channel. India Today YouTube channel offers latest news videos on Politics, Business, Cricket, Bollywood,
![Freestyle Chess Grand Slam Tour in Paris](https://www.reuters.com/resizer/v2/WVV7LUE7HBKBPOQZHTYBBYQTLE.jpg?auth=36bb985384f602750aea6931e45c9b52714706983ef83d2a055d4c16819b4320&width=960&quality=80)
![A worker unload steel bars in a steel godown on the outskirts of Ahmedabad](https://www.reuters.com/resizer/v2/A7ZTBHIWEJMXFC7RITFMXO436Q.jpg?auth=eebabb4c272b4b3197dc30760fbfb2af086327138da7c4fdc6dac81f1d04beba&width=960&quality=80) [...] Rural consumption is poised to remain a bright spot in the Indian economy, supporting growth in the ongoing fiscal year, economists said after fourth-quarter GDP growth beat estimates. [...] ![Men walk past a screen displaying market results outside the Bombay Stock Exchange (BSE) in Mumbai](https://www.reuters.com/resizer/v2/WYXPYGO5ERKP5OBAG4RQ5D5F7Y.jpg?auth=8f993961eafe73e28ba9e6975e02075585b6b2fe98dda1b5b4169f4f26716224&width=960&quality=80)
![IISS Shangri-La Dialogue security summit in Singapore](https://www.reuters.com/resizer/v2/QRUUR6BD2VPT3D6X5MNNJCKI5Q.jpg?auth=198c0a9e3dd1f08ee1f7f7f0f12d1f1ab0ad00fdb33786892d246e6d41839487&width=960&quality=80)
![](https://akm-img-a-in.tosshub.com/indiatoday/2025-05/Newstoday.jpg?VersionId=iO2cR1BKs7BRKss.zqHTel6xldzgJFl0&size=240:135)

#### [Monday to Friday at 09:00 pm](/programmes/news-today "News Today")

![](https://akm-img-a-in.tosshub.com/indiatoday/2025-04/5live_End_frame_Gaurav.jpg?VersionId=E17W1vqp_byAk_cWAr6CsEOE.lg2wCFU&size=240:135)

#### [Monday to Friday at 05:00 pm](/programmes/5ive-live "5ive Live")

## WHAT’S HAPPENING IN

## [Videos](/videos "Videos") [...] | Teams | PLD | WIN | NRR | PTS |
| --- | --- | --- | --- | --- |
| [PBKS(Q)](https://www.indiatoday.in/sports/ipl/punjab-1107) | 14 | 9 | +0.372 | 19 |
| [RCB(Q)](https://www.indiatoday.in/sports/ipl/bangalore-1105) | 14 | 9 | +0.301 | 19 |
| [GT(Q)](https://www.indiatoday.in/sports/ipl/gujarat-2955) | 14 | 9 | +0.254 | 18 |
| [MI(Q)](https://www.indiatoday.in/sports/ipl/mumbai-1111) | 14 | 8 | +1.142 | 16 |

#### India News
![today epaper widget]( https://indianexpress.com/wp-content/themes/indianexpress/images/default-ie.jpg )

**Read today's print editions**

## [Opinion](/section/opinion/)

### [GDP figures show India is back on the road to growth](https://indianexpress.com/article/opinion/columns/gdp-figures-show-india-is-back-on-the-road-to-growth-10042653/) [...] #### [June 2 sees 44 fresh COVID cases in West Bengal — bringing total to 331](https://indianexpress.com/article/cities/kolkata/covid-cases-in-west-bengal-total-331-10043886/)

#### [Sikkim landslides: 3 soldiers killed, 6 missing; over 1,600 tourists evacuated](https://indianexpress.com/article/cities/kolkata/sikkim-landslides-3-soldiers-killed-6-missing-over-1600-tourists-evacuated-10043896/) [...] ![Crackdown against illegal immigrants has to follow due process](//images.indianexpress.com/2025/06/express-view-Copy.jpg?w=210)
![AIIMS study highlights urgent need for coordinated action on childhood obesity](//images.indianexpress.com/2025/06/express-view.jpg?w=210)

2025-06-02 20:05:48,494 - INFO - Agentmain.py:265 - Structured response from LLM: tool='end' tool_query=None response="India's economy is showing signs of growth, with rural consumption expected to remain a bright spot, and the country is also witnessing significant developments in the aviation sector, with Prime Minister Modi stating that India offers an excellent opportunity for investment. Additionally, the country is forming industry-leading partnerships with Europe and North America. The BJP is also planning its strategy for the upcoming elections in Bihar." sources=['https://www.thehindu.com/news/national/as-the-ndas-allies-in-bihar-posture-over-seat-sharing-the-bjp-plans-its-strategy/article69648703.ece', 'https://www.thehindu.com/business/Industry/prime-minister-narendra-modi-addresses-the-agm-of-international-air-transport-association/article69649030.ece']
2025-06-02 20:05:48,550 - INFO - Agentmain.py:397 - Handled tool response for end
2025-06-02 20:05:48,631 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-02 20:05:48,632 - INFO - Agentmain.py:648 - Using LLM-provided final response: India's economy is showing signs of growth, with rural consumption expected to remain a bright spot, and the country is also witnessing significant developments in the aviation sector, with Prime Minister Modi stating that India offers an excellent opportunity for investment. Additionally, the country is forming industry-leading partnerships with Europe and North America. The BJP is also planning its strategy for the upcoming elections in Bihar.
2025-06-02 20:07:03,858 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:07:03,859 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:07:03,886 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:07:03,887 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:07:04,547 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='You previously asked about COVID news. Would you like an update on the current situation?' sources=None
2025-06-02 20:07:04,547 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='You previously asked about COVID news. Would you like an update on the current situation?' sources=None
2025-06-02 20:07:04,548 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-02 20:07:04,578 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-02 20:07:04,579 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='You previously asked about COVID news. Would you like an update on the current situation?' sources=None
2025-06-02 20:07:18,346 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:07:18,347 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:07:18,372 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:07:18,372 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:07:18,911 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='You said yes. Is there something I can help you with?' sources=None
2025-06-02 20:07:18,912 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='You said yes. Is there something I can help you with?' sources=None
2025-06-02 20:07:18,913 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-02 20:07:18,940 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-02 20:07:18,940 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='You said yes. Is there something I can help you with?' sources=None
2025-06-02 20:07:41,808 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:07:41,808 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:07:41,837 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:07:41,837 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:07:42,704 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='The Ramayan is an ancient Indian epic that tells the story of Rama, a king who is exiled to the forest with his wife Sita and brother Lakshmana. The epic explores themes of duty, loyalty, and the struggle between good and evil. It is one of the most revered and influential works of Hindu literature, and its stories and characters continue to be celebrated and retold in many forms of art and media.' sources=None
2025-06-02 20:07:42,704 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='The Ramayan is an ancient Indian epic that tells the story of Rama, a king who is exiled to the forest with his wife Sita and brother Lakshmana. The epic explores themes of duty, loyalty, and the struggle between good and evil. It is one of the most revered and influential works of Hindu literature, and its stories and characters continue to be celebrated and retold in many forms of art and media.' sources=None
2025-06-02 20:07:42,706 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-02 20:07:42,750 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-02 20:07:42,751 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='The Ramayan is an ancient Indian epic that tells the story of Rama, a king who is exiled to the forest with his wife Sita and brother Lakshmana. The epic explores themes of duty, loyalty, and the struggle between good and evil. It is one of the most revered and influential works of Hindu literature, and its stories and characters continue to be celebrated and retold in many forms of art and media.' sources=None
2025-06-02 20:08:05,881 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:08:05,881 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:08:05,912 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:08:05,912 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:08:06,810 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='The Ramayan is an ancient Indian epic that tells the story of Rama, a king who is exiled to the forest with his wife Sita and brother Lakshmana. The epic explores themes of duty, loyalty, and the struggle between good and evil. It is one of the most revered and influential works of Hindu literature, and its stories and characters continue to be celebrated and retold in many forms of art and media.' sources=None
2025-06-02 20:08:06,810 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='The Ramayan is an ancient Indian epic that tells the story of Rama, a king who is exiled to the forest with his wife Sita and brother Lakshmana. The epic explores themes of duty, loyalty, and the struggle between good and evil. It is one of the most revered and influential works of Hindu literature, and its stories and characters continue to be celebrated and retold in many forms of art and media.' sources=None
2025-06-02 20:08:06,811 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-02 20:08:06,846 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-02 20:08:06,846 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='The Ramayan is an ancient Indian epic that tells the story of Rama, a king who is exiled to the forest with his wife Sita and brother Lakshmana. The epic explores themes of duty, loyalty, and the struggle between good and evil. It is one of the most revered and influential works of Hindu literature, and its stories and characters continue to be celebrated and retold in many forms of art and media.' sources=None
2025-06-02 20:08:30,349 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:08:30,349 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:08:30,361 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:08:30,361 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:08:31,060 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='You previously asked about Ramayan on Wikipedia. The Ramayana is an ancient Indian epic poem that tells the story of Rama, a prince who is exiled to the forest with his wife Sita and brother Lakshmana. Would you like to know more about a specific aspect of the Ramayana?' sources=None
2025-06-02 20:08:31,060 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='You previously asked about Ramayan on Wikipedia. The Ramayana is an ancient Indian epic poem that tells the story of Rama, a prince who is exiled to the forest with his wife Sita and brother Lakshmana. Would you like to know more about a specific aspect of the Ramayana?' sources=None
2025-06-02 20:08:31,060 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-02 20:08:31,089 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-02 20:08:31,089 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='You previously asked about Ramayan on Wikipedia. The Ramayana is an ancient Indian epic poem that tells the story of Rama, a prince who is exiled to the forest with his wife Sita and brother Lakshmana. Would you like to know more about a specific aspect of the Ramayana?' sources=None
2025-06-02 20:08:55,257 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:08:55,258 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:08:55,290 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:08:55,291 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:08:56,211 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Sundar Pichai is the CEO of Google and Alphabet. He was born on June 16, 1972, in Madurai, India. Pichai earned his degree in metallurgical engineering from the Indian Institute of Technology Kharagpur and later earned his M.S. in materials science and engineering from Stanford University. He joined Google in 2004 and played a key role in the development of the Google Chrome browser. He became the CEO of Google in 2015 and took over as the CEO of Alphabet in 2019.' sources=None
2025-06-02 20:08:56,212 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Sundar Pichai is the CEO of Google and Alphabet. He was born on June 16, 1972, in Madurai, India. Pichai earned his degree in metallurgical engineering from the Indian Institute of Technology Kharagpur and later earned his M.S. in materials science and engineering from Stanford University. He joined Google in 2004 and played a key role in the development of the Google Chrome browser. He became the CEO of Google in 2015 and took over as the CEO of Alphabet in 2019.' sources=None
2025-06-02 20:08:56,213 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-02 20:08:56,255 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-02 20:08:56,255 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Sundar Pichai is the CEO of Google and Alphabet. He was born on June 16, 1972, in Madurai, India. Pichai earned his degree in metallurgical engineering from the Indian Institute of Technology Kharagpur and later earned his M.S. in materials science and engineering from Stanford University. He joined Google in 2004 and played a key role in the development of the Google Chrome browser. He became the CEO of Google in 2015 and took over as the CEO of Alphabet in 2019.' sources=None
2025-06-02 20:09:20,424 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:09:20,425 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:09:20,454 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:09:20,455 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:09:21,475 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Sundar Pichai is the CEO of Google and Alphabet. He was born on June 16, 1972, in Madurai, India. Pichai earned his degree in metallurgical engineering from the Indian Institute of Technology Kharagpur and later earned his M.S. in materials science and engineering from Stanford University. He joined Google in 2004 and played a key role in the development of the Google Chrome browser. He became the CEO of Google in 2015 and took over as the CEO of Alphabet in 2019.' sources=None
2025-06-02 20:09:21,477 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Sundar Pichai is the CEO of Google and Alphabet. He was born on June 16, 1972, in Madurai, India. Pichai earned his degree in metallurgical engineering from the Indian Institute of Technology Kharagpur and later earned his M.S. in materials science and engineering from Stanford University. He joined Google in 2004 and played a key role in the development of the Google Chrome browser. He became the CEO of Google in 2015 and took over as the CEO of Alphabet in 2019.' sources=None
2025-06-02 20:09:21,478 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-02 20:09:21,511 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-02 20:09:21,512 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Sundar Pichai is the CEO of Google and Alphabet. He was born on June 16, 1972, in Madurai, India. Pichai earned his degree in metallurgical engineering from the Indian Institute of Technology Kharagpur and later earned his M.S. in materials science and engineering from Stanford University. He joined Google in 2004 and played a key role in the development of the Google Chrome browser. He became the CEO of Google in 2015 and took over as the CEO of Alphabet in 2019.' sources=None
2025-06-02 20:10:01,063 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:10:01,063 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:10:01,095 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:10:01,095 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:10:01,605 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='websearch' tool_query='iPhone 16 features' response=None sources=None
2025-06-02 20:10:01,606 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='websearch' tool_query='iPhone 16 features' response=None sources=None
2025-06-02 20:10:01,607 - INFO - Agentmain.py:400 - Decided next tool: websearch
2025-06-02 20:10:01,609 - INFO - Agentmain.py:574 - Entered Web Search Node
2025-06-02 20:10:12,112 - ERROR - Agentmain.py:633 - Error fetching from Web Search: HTTPSConnectionPool(host='serpapi.com', port=443): Read timed out. (read timeout=10)
2025-06-02 20:10:12,137 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:10:12,138 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:10:12,162 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:10:12,162 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:10:12,164 - INFO - Agentmain.py:262 - Message to LLM: 
You are an AI assistant that summarizes web search results.

Based on the following search result snippets, generate a clear and concise 2-3 sentence summary directly addressing the user's query.

If no meaningful results are found, respond with: "No relevant web search results could be found."

IMPORTANT:
- Output a single JSON object with keys: "tool", "tool_query", "response", "sources".
- Set "tool" to "end".
- Set "tool_query" to null.
- Write your summarized answer in the "response" field.
- Optionally, include any relevant URLs or citations in "sources".
- **No extra text or comments, only the JSON object.**

Previous assistant response: tool='websearch' tool_query='iPhone 16 features' response=None sources=None

Search results:
Failed to fetch web search results: HTTPSConnectionPool(host='serpapi.com', port=443): Read timed out. (read timeout=10)

2025-06-02 20:10:12,598 - INFO - Agentmain.py:265 - Structured response from LLM: tool='end' tool_query=None response='No relevant web search results could be found.' sources=None
2025-06-02 20:10:12,625 - INFO - Agentmain.py:397 - Handled tool response for end
2025-06-02 20:10:12,668 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-02 20:10:12,668 - INFO - Agentmain.py:648 - Using LLM-provided final response: No relevant web search results could be found.
2025-06-02 20:11:15,535 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 20:11:15,679 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 20:11:15,701 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 20:11:15,705 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 20:11:17,636 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:11:17,637 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:11:17,668 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:11:17,669 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:11:18,635 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="You've asked about iPhone 16 features multiple times. As this is a repeated query, I'll provide a general response. The iPhone 16 is expected to have several new features, including improved cameras, a faster processor, and enhanced battery life. However, since the device has not been officially released by Apple, the exact features and specifications are not yet confirmed. If you're looking for the most up-to-date information, I recommend checking Apple's official website or reputable tech news sources for the latest updates." sources=None
2025-06-02 20:11:18,637 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="You've asked about iPhone 16 features multiple times. As this is a repeated query, I'll provide a general response. The iPhone 16 is expected to have several new features, including improved cameras, a faster processor, and enhanced battery life. However, since the device has not been officially released by Apple, the exact features and specifications are not yet confirmed. If you're looking for the most up-to-date information, I recommend checking Apple's official website or reputable tech news sources for the latest updates." sources=None
2025-06-02 20:11:18,638 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-02 20:11:18,680 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-02 20:11:18,680 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="You've asked about iPhone 16 features multiple times. As this is a repeated query, I'll provide a general response. The iPhone 16 is expected to have several new features, including improved cameras, a faster processor, and enhanced battery life. However, since the device has not been officially released by Apple, the exact features and specifications are not yet confirmed. If you're looking for the most up-to-date information, I recommend checking Apple's official website or reputable tech news sources for the latest updates." sources=None
2025-06-02 20:12:09,233 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:12:09,233 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:12:09,258 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:12:09,259 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:12:09,711 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='websearch' tool_query='new phones' response=None sources=None
2025-06-02 20:12:09,713 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='websearch' tool_query='new phones' response=None sources=None
2025-06-02 20:12:09,716 - INFO - Agentmain.py:400 - Decided next tool: websearch
2025-06-02 20:12:09,717 - INFO - Agentmain.py:574 - Entered Web Search Node
2025-06-02 20:12:16,492 - INFO - Agentmain.py:615 - Retrieved 8 search results
2025-06-02 20:12:16,493 - INFO - Agentmain.py:630 - Web Search completed successfully
2025-06-02 20:12:16,530 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:12:16,530 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:12:16,563 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:12:16,563 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:12:16,565 - INFO - Agentmain.py:262 - Message to LLM: 
You are an AI assistant that summarizes web search results.

Based on the following search result snippets, generate a clear and concise 2-3 sentence summary directly addressing the user's query.

If no meaningful results are found, respond with: "No relevant web search results could be found."

IMPORTANT:
- Output a single JSON object with keys: "tool", "tool_query", "response", "sources".
- Set "tool" to "end".
- Set "tool_query" to null.
- Write your summarized answer in the "response" field.
- Optionally, include any relevant URLs or citations in "sources".
- **No extra text or comments, only the JSON object.**

Previous assistant response: tool='websearch' tool_query='new phones' response=None sources=None

Search results:
Buy a new phone or upgrade your current phone today at the Mint Mobile Phone Store. Get low monthly payments as low as 0% APR for up to 24 months.
Cell Phones Top Deals · Unlocked Cell Phones · Cell Phone Accessories · Apple iPhone · Samsung Galaxy · Google Pixel · Motorola · Verizon Phones & Plans.
Whether you're a mobile-tech expert, novice or somewhere in between, Verizon has a smartphone for you. Shop the latest smartphones at Verizon today.
Explore T-Mobile's selection of the latest cell phones and smartphones. Compare models, prices, and features from the most popular brands today!
Looking for new cell phones? Shop for new cell phones, iPhones, unlocked phones, iPhone accessories, contract mobile phones and more Walmart.com. Save money.
These are the best phones that we've tested and reviewed. From the Google Pixel 9A to the Samsung Galaxy S25 and Apple's iPhone 16: Here are the phones you ...
Shop AT&T's selection of cell phones from top brands like Apple, Google, Samsung, and Motorola. Buy the new iPhone 16 and the new Galaxy S25 now at AT&T.
Discover our newest Galaxy smartphones and explore Samsung's full lineup—including the Galaxy S25 Series, Flip and Fold phones, Fan Edition, A Series 5G, and

2025-06-02 20:12:17,561 - INFO - Agentmain.py:265 - Structured response from LLM: tool='end' tool_query=None response="You can find new phones at various stores such as Mint Mobile, Verizon, T-Mobile, Walmart, and AT&T, with options from top brands like Apple, Google, Samsung, and Motorola. These stores offer a range of models, prices, and features to choose from, including the latest smartphones like the Google Pixel 9A, Samsung Galaxy S25, and Apple's iPhone 16. You can also explore unlocked cell phones, phone accessories, and plans from these providers." sources=['https://www.mintmobile.com/phone-store/', 'https://www.verizon.com/', 'https://www.t-mobile.com/', 'https://www.walmart.com/', 'https://www.att.com/']
2025-06-02 20:12:17,601 - INFO - Agentmain.py:397 - Handled tool response for end
2025-06-02 20:12:17,674 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-02 20:12:17,675 - INFO - Agentmain.py:648 - Using LLM-provided final response: You can find new phones at various stores such as Mint Mobile, Verizon, T-Mobile, Walmart, and AT&T, with options from top brands like Apple, Google, Samsung, and Motorola. These stores offer a range of models, prices, and features to choose from, including the latest smartphones like the Google Pixel 9A, Samsung Galaxy S25, and Apple's iPhone 16. You can also explore unlocked cell phones, phone accessories, and plans from these providers.
2025-06-02 20:15:38,034 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 20:15:38,204 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 20:15:38,225 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 20:15:38,229 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 20:15:53,249 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:15:53,250 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:15:53,281 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:15:53,282 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:15:54,123 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Your name is Devanshu Singh.' sources=None
2025-06-02 20:15:54,123 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Your name is Devanshu Singh.' sources=None
2025-06-02 20:15:54,124 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-02 20:15:54,152 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-02 20:15:54,153 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Your name is Devanshu Singh.' sources=None
2025-06-02 20:16:22,140 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:16:22,141 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:16:22,175 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:16:22,175 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:16:22,841 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='You previously asked for a Wikipedia search on Microsoft. The information was likely provided earlier in our conversation. If you need it again, I can try to provide a summary or you can ask me to search for something specific about Microsoft.' sources=None
2025-06-02 20:16:22,842 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='You previously asked for a Wikipedia search on Microsoft. The information was likely provided earlier in our conversation. If you need it again, I can try to provide a summary or you can ask me to search for something specific about Microsoft.' sources=None
2025-06-02 20:16:22,843 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-02 20:16:22,887 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-02 20:16:22,888 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='You previously asked for a Wikipedia search on Microsoft. The information was likely provided earlier in our conversation. If you need it again, I can try to provide a summary or you can ask me to search for something specific about Microsoft.' sources=None
2025-06-02 20:16:58,026 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:16:58,026 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:16:58,056 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:16:58,057 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:16:58,860 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='You previously asked for a Wikipedia search on Microsoft. The information was likely provided earlier in our conversation. If you need it again, I can try to provide a summary or you can ask me to search for something specific about Microsoft.' sources=None
2025-06-02 20:16:58,861 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='You previously asked for a Wikipedia search on Microsoft. The information was likely provided earlier in our conversation. If you need it again, I can try to provide a summary or you can ask me to search for something specific about Microsoft.' sources=None
2025-06-02 20:16:58,862 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-02 20:16:58,890 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-02 20:16:58,891 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='You previously asked for a Wikipedia search on Microsoft. The information was likely provided earlier in our conversation. If you need it again, I can try to provide a summary or you can ask me to search for something specific about Microsoft.' sources=None
2025-06-02 20:17:30,080 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:17:30,082 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:17:30,115 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:17:30,115 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:17:30,961 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="Logistic regression is a statistical method for analyzing a dataset in which there are one or more independent variables that determine an outcome. The outcome is measured with a dichotomous variable, which means the outcome can take only two possible categories, such as yes/no, present/absent, etc. It's used for predicting the outcomes of a categorical dependent variable based on one or more predictor variables." sources=None
2025-06-02 20:17:30,962 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="Logistic regression is a statistical method for analyzing a dataset in which there are one or more independent variables that determine an outcome. The outcome is measured with a dichotomous variable, which means the outcome can take only two possible categories, such as yes/no, present/absent, etc. It's used for predicting the outcomes of a categorical dependent variable based on one or more predictor variables." sources=None
2025-06-02 20:17:30,962 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-02 20:17:31,001 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-02 20:17:31,002 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="Logistic regression is a statistical method for analyzing a dataset in which there are one or more independent variables that determine an outcome. The outcome is measured with a dichotomous variable, which means the outcome can take only two possible categories, such as yes/no, present/absent, etc. It's used for predicting the outcomes of a categorical dependent variable based on one or more predictor variables." sources=None
2025-06-02 20:17:50,806 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:17:50,807 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:17:50,843 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:17:50,843 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:17:52,025 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="Logistic regression is a statistical method for analyzing a dataset in which there are one or more independent variables that determine an outcome. The outcome is measured with a dichotomous variable, which means the outcome can take only two possible categories, such as yes/no, present/absent, etc. It's used for predicting the outcomes of a categorical dependent variable based on one or more predictor variables." sources=None
2025-06-02 20:17:52,025 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="Logistic regression is a statistical method for analyzing a dataset in which there are one or more independent variables that determine an outcome. The outcome is measured with a dichotomous variable, which means the outcome can take only two possible categories, such as yes/no, present/absent, etc. It's used for predicting the outcomes of a categorical dependent variable based on one or more predictor variables." sources=None
2025-06-02 20:17:52,026 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-02 20:17:52,064 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-02 20:17:52,064 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="Logistic regression is a statistical method for analyzing a dataset in which there are one or more independent variables that determine an outcome. The outcome is measured with a dichotomous variable, which means the outcome can take only two possible categories, such as yes/no, present/absent, etc. It's used for predicting the outcomes of a categorical dependent variable based on one or more predictor variables." sources=None
2025-06-02 20:18:18,052 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:18:18,054 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:18:18,085 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:18:18,085 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:18:18,870 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='You previously asked about machine learning from Wikipedia. I can provide information on the topic. Machine learning is a field of study that gives computers the ability to learn without being explicitly programmed. It involves the use of algorithms and statistical models to enable machines to perform a specific task. Would you like to know more about a specific aspect of machine learning?' sources=None
2025-06-02 20:18:18,871 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='You previously asked about machine learning from Wikipedia. I can provide information on the topic. Machine learning is a field of study that gives computers the ability to learn without being explicitly programmed. It involves the use of algorithms and statistical models to enable machines to perform a specific task. Would you like to know more about a specific aspect of machine learning?' sources=None
2025-06-02 20:18:18,872 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-02 20:18:18,910 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-02 20:18:18,910 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='You previously asked about machine learning from Wikipedia. I can provide information on the topic. Machine learning is a field of study that gives computers the ability to learn without being explicitly programmed. It involves the use of algorithms and statistical models to enable machines to perform a specific task. Would you like to know more about a specific aspect of machine learning?' sources=None
2025-06-02 20:21:17,190 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-02 20:21:17,361 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-02 20:21:17,391 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-02 20:21:17,395 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-02 20:21:19,850 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:21:19,851 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:21:19,883 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:21:19,884 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:21:21,140 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="The Jadon caste is a social group found in the Indian states of Haryana, Punjab, and Uttar Pradesh. They are considered to be a part of the larger Yadav community, which is a pastoral caste. The Jadon caste is known for their traditional occupation of cattle herding and farming. However, many members of the community have also taken up other professions such as business, education, and government service. The Jadon caste has a rich cultural heritage, with their own distinct customs, traditions, and festivals. They are known for their warm hospitality and strong family ties. If you're looking for more specific information on the Jadon caste history, I can try to provide more details or point you in the direction of some resources." sources=None
2025-06-02 20:21:21,142 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="The Jadon caste is a social group found in the Indian states of Haryana, Punjab, and Uttar Pradesh. They are considered to be a part of the larger Yadav community, which is a pastoral caste. The Jadon caste is known for their traditional occupation of cattle herding and farming. However, many members of the community have also taken up other professions such as business, education, and government service. The Jadon caste has a rich cultural heritage, with their own distinct customs, traditions, and festivals. They are known for their warm hospitality and strong family ties. If you're looking for more specific information on the Jadon caste history, I can try to provide more details or point you in the direction of some resources." sources=None
2025-06-02 20:21:21,143 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-02 20:21:21,208 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-02 20:21:21,209 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="The Jadon caste is a social group found in the Indian states of Haryana, Punjab, and Uttar Pradesh. They are considered to be a part of the larger Yadav community, which is a pastoral caste. The Jadon caste is known for their traditional occupation of cattle herding and farming. However, many members of the community have also taken up other professions such as business, education, and government service. The Jadon caste has a rich cultural heritage, with their own distinct customs, traditions, and festivals. They are known for their warm hospitality and strong family ties. If you're looking for more specific information on the Jadon caste history, I can try to provide more details or point you in the direction of some resources." sources=None
2025-06-02 20:22:56,195 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:22:56,195 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:22:56,211 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:22:56,211 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:22:56,936 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Wikipedia is a free online encyclopedia that allows users to create and edit articles on a wide range of topics. You previously asked about Wikipedia, and also searched for information on machine learning from Wikipedia, as well as Microsoft.' sources=None
2025-06-02 20:22:56,936 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Wikipedia is a free online encyclopedia that allows users to create and edit articles on a wide range of topics. You previously asked about Wikipedia, and also searched for information on machine learning from Wikipedia, as well as Microsoft.' sources=None
2025-06-02 20:22:56,936 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-02 20:22:56,968 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-02 20:22:56,968 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Wikipedia is a free online encyclopedia that allows users to create and edit articles on a wide range of topics. You previously asked about Wikipedia, and also searched for information on machine learning from Wikipedia, as well as Microsoft.' sources=None
2025-06-02 20:24:03,163 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:24:03,164 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:24:03,191 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:24:03,192 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:24:03,842 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='wikipedia' tool_query='Nelson Mandela' response=None sources=None
2025-06-02 20:24:03,843 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='wikipedia' tool_query='Nelson Mandela' response=None sources=None
2025-06-02 20:24:03,843 - INFO - Agentmain.py:400 - Decided next tool: wikipedia
2025-06-02 20:24:03,846 - INFO - Agentmain.py:449 - Entered Wikipedia Search Node
2025-06-02 20:24:08,867 - INFO - Agentmain.py:467 - Structured Wikipedia summary: summary="Page: Nelson Mandela\nSummary: Nelson Rolihlahla Mandela ( man-DEL-ə, Xhosa: [xolíɬaɬa mandɛ̂ːla]; born Rolihlahla Mandela; 18 July 1918 – 5 December 2013) was a South African anti-apartheid activist and politician who served as the first president of South Africa from 1994 to 1999. He was the country's first black head of state and the first elected in a fully representative democratic election. His government focused on dismantling the legacy of apartheid by fostering racial reconciliation. Ideologically an African nationalist and socialist, he served as the president of the African National Congress (ANC) party from 1991 to 1997.\nA Xhosa, Mandela was born into the Thembu royal family in Mvezo, South Africa. He studied law at the University of Fort Hare and the University of Witwatersrand before working as a lawyer in Johannesburg. There he became involved in anti-colonial and African nationalist politics, joining the ANC in 1943 and co-founding its Youth League in 1944. After the National Party's white-only government established apartheid, a system of racial segregation that privileged whites, Mandela and the ANC committed themselves to its overthrow. He was appointed president of the ANC's Transvaal branch, rising to prominence for his involvement in the 1952 Defiance Campaign and the 1955 Congress of the People. He was repeatedly arrested for seditious activities and was unsuccessfully prosecuted in the 1956 Treason Trial. Influenced by Marxism, he secretly joined the banned South African Communist Party (SACP). Although initially committed to non-violent protest, in association with the SACP he co-founded the militant uMkhonto we Sizwe in 1961 that led a sabotage campaign against the apartheid government. He was arrested and imprisoned in 1962, and, following the Rivonia Trial, was sentenced to life imprisonment for conspiring to overthrow the state.\nMandela served 27 years in prison, split between Robben Island, Pollsmoor Prison, and Victor Verster Prison. Am" page_title=None url=None
2025-06-02 20:24:08,868 - INFO - Agentmain.py:470 - Wikipedia summary retrieved: Page: Nelson Mandela
Summary: Nelson Rolihlahla Mandela ( man-DEL-ə, Xhosa: [xolíɬaɬa mandɛ̂ːla]; born Rolihlahla Mandela; 18 July 1918 – 5 December 2013) was a South African anti-apartheid activist and politician who served as the first president of South Africa from 1994 to 1999. He was the country's first black head of state and the first elected in a fully representative democratic election. His government focused on dismantling the legacy of apartheid by fostering racial reconciliation. Ideologically an African nationalist and socialist, he served as the president of the African National Congress (ANC) party from 1991 to 1997.
A Xhosa, Mandela was born into the Thembu royal family in Mvezo, South Africa. He studied law at the University of Fort Hare and the University of Witwatersrand before working as a lawyer in Johannesburg. There he became involved in anti-colonial and African nationalist politics, joining the ANC in 1943 and co-founding its Youth League in 1944. After the National Party's white-only government established apartheid, a system of racial segregation that privileged whites, Mandela and the ANC committed themselves to its overthrow. He was appointed president of the ANC's Transvaal branch, rising to prominence for his involvement in the 1952 Defiance Campaign and the 1955 Congress of the People. He was repeatedly arrested for seditious activities and was unsuccessfully prosecuted in the 1956 Treason Trial. Influenced by Marxism, he secretly joined the banned South African Communist Party (SACP). Although initially committed to non-violent protest, in association with the SACP he co-founded the militant uMkhonto we Sizwe in 1961 that led a sabotage campaign against the apartheid government. He was arrested and imprisoned in 1962, and, following the Rivonia Trial, was sentenced to life imprisonment for conspiring to overthrow the state.
Mandela served 27 years in prison, split between Robben Island, Pollsmoor Prison, and Victor Verster Prison. Am
2025-06-02 20:24:08,891 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-02 20:24:08,891 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-02 20:24:08,921 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-02 20:24:08,922 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-02 20:24:08,924 - INFO - Agentmain.py:262 - Message to LLM: 
You are an AI assistant that helps summarize factual information obtained from Wikipedia.

The following content has been retrieved from Wikipedia in response to a user's query. Your task is to analyze this content and generate a clear, concise, and factual answer in 2-3 sentences that directly addresses the user's query.

If the content is not relevant or no summary can be made, respond with: "No relevant information could be found on Wikipedia."

IMPORTANT:
- Your output must be a single JSON object with keys: "tool", "tool_query", "response", "sources".
- Set "tool" to "end".
- Set "tool_query" to null.
- Write your answer in the "response" field.
- Optionally, fill "sources" with any relevant URLs or citations.
- **Do NOT include any comments, explanations, or extra text. Only output the JSON object.**

Previous assistant response: tool='wikipedia' tool_query='Nelson Mandela' response=None sources=None

Wikipedia content: Page: Nelson Mandela
Summary: Nelson Rolihlahla Mandela ( man-DEL-ə, Xhosa: [xolíɬaɬa mandɛ̂ːla]; born Rolihlahla Mandela; 18 July 1918 – 5 December 2013) was a South African anti-apartheid activist and politician who served as the first president of South Africa from 1994 to 1999. He was the country's first black head of state and the first elected in a fully representative democratic election. His government focused on dismantling the legacy of apartheid by fostering racial reconciliation. Ideologically an African nationalist and socialist, he served as the president of the African National Congress (ANC) party from 1991 to 1997.
A Xhosa, Mandela was born into the Thembu royal family in Mvezo, South Africa. He studied law at the University of Fort Hare and the University of Witwatersrand before working as a lawyer in Johannesburg. There he became involved in anti-colonial and African nationalist politics, joining the ANC in 1943 and co-founding its Youth League in 1944. After the National Party's white-only government established apartheid, a system of racial segregation that privileged whites, Mandela and the ANC committed themselves to its overthrow. He was appointed president of the ANC's Transvaal branch, rising to prominence for his involvement in the 1952 Defiance Campaign and the 1955 Congress of the People. He was repeatedly arrested for seditious activities and was unsuccessfully prosecuted in the 1956 Treason Trial. Influenced by Marxism, he secretly joined the banned South African Communist Party (SACP). Although initially committed to non-violent protest, in association with the SACP he co-founded the militant uMkhonto we Sizwe in 1961 that led a sabotage campaign against the apartheid government. He was arrested and imprisoned in 1962, and, following the Rivonia Trial, was sentenced to life imprisonment for conspiring to overthrow the state.
Mandela served 27 years in prison, split between Robben Island, Pollsmoor Prison, and Victor Verster Prison. Am

2025-06-02 20:24:09,914 - INFO - Agentmain.py:265 - Structured response from LLM: tool='end' tool_query=None response='Nelson Mandela was a South African anti-apartheid activist and politician who served as the first president of South Africa from 1994 to 1999. He was a key figure in the fight against apartheid, and his government focused on dismantling the legacy of apartheid by fostering racial reconciliation. Mandela was born on July 18, 1918, and died on December 5, 2013.' sources=['https://en.wikipedia.org/wiki/Nelson_Mandela']
2025-06-02 20:24:09,959 - INFO - Agentmain.py:397 - Handled tool response for end
2025-06-02 20:24:10,029 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-02 20:24:10,031 - INFO - Agentmain.py:648 - Using LLM-provided final response: Nelson Mandela was a South African anti-apartheid activist and politician who served as the first president of South Africa from 1994 to 1999. He was a key figure in the fight against apartheid, and his government focused on dismantling the legacy of apartheid by fostering racial reconciliation. Mandela was born on July 18, 1918, and died on December 5, 2013.
2025-06-03 11:29:43,433 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-03 11:29:43,961 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-03 11:29:44,053 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-03 11:29:44,059 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-03 11:30:25,608 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 11:30:25,608 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 11:30:25,684 - INFO - Agentmain.py:144 - Found 1 similar memories and 0 summaries.
2025-06-03 11:30:25,684 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 11:30:28,037 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="Hello! It's nice to meet you. Is there something I can help you with?" sources=None
2025-06-03 11:30:28,037 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="Hello! It's nice to meet you. Is there something I can help you with?" sources=None
2025-06-03 11:30:28,037 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 11:30:28,128 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 11:30:28,128 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="Hello! It's nice to meet you. Is there something I can help you with?" sources=None
2025-06-03 11:30:56,864 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 11:30:56,865 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 11:30:56,913 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 11:30:56,913 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 11:30:57,634 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='wikipedia' tool_query='Nelson Mandela' response=None sources=None
2025-06-03 11:30:57,634 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='wikipedia' tool_query='Nelson Mandela' response=None sources=None
2025-06-03 11:30:57,634 - INFO - Agentmain.py:400 - Decided next tool: wikipedia
2025-06-03 11:30:57,634 - INFO - Agentmain.py:449 - Entered Wikipedia Search Node
2025-06-03 11:31:01,104 - INFO - Agentmain.py:467 - Structured Wikipedia summary: summary="Page: Nelson Mandela\nSummary: Nelson Rolihlahla Mandela ( man-DEL-ə, Xhosa: [xolíɬaɬa mandɛ̂ːla]; born Rolihlahla Mandela; 18 July 1918 – 5 December 2013) was a South African anti-apartheid activist and politician who served as the first president of South Africa from 1994 to 1999. He was the country's first black head of state and the first elected in a fully representative democratic election. His government focused on dismantling the legacy of apartheid by fostering racial reconciliation. Ideologically an African nationalist and socialist, he served as the president of the African National Congress (ANC) party from 1991 to 1997.\nA Xhosa, Mandela was born into the Thembu royal family in Mvezo, South Africa. He studied law at the University of Fort Hare and the University of Witwatersrand before working as a lawyer in Johannesburg. There he became involved in anti-colonial and African nationalist politics, joining the ANC in 1943 and co-founding its Youth League in 1944. After the National Party's white-only government established apartheid, a system of racial segregation that privileged whites, Mandela and the ANC committed themselves to its overthrow. He was appointed president of the ANC's Transvaal branch, rising to prominence for his involvement in the 1952 Defiance Campaign and the 1955 Congress of the People. He was repeatedly arrested for seditious activities and was unsuccessfully prosecuted in the 1956 Treason Trial. Influenced by Marxism, he secretly joined the banned South African Communist Party (SACP). Although initially committed to non-violent protest, in association with the SACP he co-founded the militant uMkhonto we Sizwe in 1961 that led a sabotage campaign against the apartheid government. He was arrested and imprisoned in 1962, and, following the Rivonia Trial, was sentenced to life imprisonment for conspiring to overthrow the state.\nMandela served 27 years in prison, split between Robben Island, Pollsmoor Prison, and Victor Verster Prison. Am" page_title=None url=None
2025-06-03 11:31:01,106 - INFO - Agentmain.py:470 - Wikipedia summary retrieved: Page: Nelson Mandela
Summary: Nelson Rolihlahla Mandela ( man-DEL-ə, Xhosa: [xolíɬaɬa mandɛ̂ːla]; born Rolihlahla Mandela; 18 July 1918 – 5 December 2013) was a South African anti-apartheid activist and politician who served as the first president of South Africa from 1994 to 1999. He was the country's first black head of state and the first elected in a fully representative democratic election. His government focused on dismantling the legacy of apartheid by fostering racial reconciliation. Ideologically an African nationalist and socialist, he served as the president of the African National Congress (ANC) party from 1991 to 1997.
A Xhosa, Mandela was born into the Thembu royal family in Mvezo, South Africa. He studied law at the University of Fort Hare and the University of Witwatersrand before working as a lawyer in Johannesburg. There he became involved in anti-colonial and African nationalist politics, joining the ANC in 1943 and co-founding its Youth League in 1944. After the National Party's white-only government established apartheid, a system of racial segregation that privileged whites, Mandela and the ANC committed themselves to its overthrow. He was appointed president of the ANC's Transvaal branch, rising to prominence for his involvement in the 1952 Defiance Campaign and the 1955 Congress of the People. He was repeatedly arrested for seditious activities and was unsuccessfully prosecuted in the 1956 Treason Trial. Influenced by Marxism, he secretly joined the banned South African Communist Party (SACP). Although initially committed to non-violent protest, in association with the SACP he co-founded the militant uMkhonto we Sizwe in 1961 that led a sabotage campaign against the apartheid government. He was arrested and imprisoned in 1962, and, following the Rivonia Trial, was sentenced to life imprisonment for conspiring to overthrow the state.
Mandela served 27 years in prison, split between Robben Island, Pollsmoor Prison, and Victor Verster Prison. Am
2025-06-03 11:31:01,164 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 11:31:01,165 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 11:31:01,226 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 11:31:01,227 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 11:31:01,232 - INFO - Agentmain.py:262 - Message to LLM: 
You are an AI assistant that helps summarize factual information obtained from Wikipedia.

The following content has been retrieved from Wikipedia in response to a user's query. Your task is to analyze this content and generate a clear, concise, and factual answer in 2-3 sentences that directly addresses the user's query.

If the content is not relevant or no summary can be made, respond with: "No relevant information could be found on Wikipedia."

IMPORTANT:
- Your output must be a single JSON object with keys: "tool", "tool_query", "response", "sources".
- Set "tool" to "end".
- Set "tool_query" to null.
- Write your answer in the "response" field.
- Optionally, fill "sources" with any relevant URLs or citations.
- **Do NOT include any comments, explanations, or extra text. Only output the JSON object.**

Previous assistant response: tool='wikipedia' tool_query='Nelson Mandela' response=None sources=None

Wikipedia content: Page: Nelson Mandela
Summary: Nelson Rolihlahla Mandela ( man-DEL-ə, Xhosa: [xolíɬaɬa mandɛ̂ːla]; born Rolihlahla Mandela; 18 July 1918 – 5 December 2013) was a South African anti-apartheid activist and politician who served as the first president of South Africa from 1994 to 1999. He was the country's first black head of state and the first elected in a fully representative democratic election. His government focused on dismantling the legacy of apartheid by fostering racial reconciliation. Ideologically an African nationalist and socialist, he served as the president of the African National Congress (ANC) party from 1991 to 1997.
A Xhosa, Mandela was born into the Thembu royal family in Mvezo, South Africa. He studied law at the University of Fort Hare and the University of Witwatersrand before working as a lawyer in Johannesburg. There he became involved in anti-colonial and African nationalist politics, joining the ANC in 1943 and co-founding its Youth League in 1944. After the National Party's white-only government established apartheid, a system of racial segregation that privileged whites, Mandela and the ANC committed themselves to its overthrow. He was appointed president of the ANC's Transvaal branch, rising to prominence for his involvement in the 1952 Defiance Campaign and the 1955 Congress of the People. He was repeatedly arrested for seditious activities and was unsuccessfully prosecuted in the 1956 Treason Trial. Influenced by Marxism, he secretly joined the banned South African Communist Party (SACP). Although initially committed to non-violent protest, in association with the SACP he co-founded the militant uMkhonto we Sizwe in 1961 that led a sabotage campaign against the apartheid government. He was arrested and imprisoned in 1962, and, following the Rivonia Trial, was sentenced to life imprisonment for conspiring to overthrow the state.
Mandela served 27 years in prison, split between Robben Island, Pollsmoor Prison, and Victor Verster Prison. Am

2025-06-03 11:31:02,254 - INFO - Agentmain.py:265 - Structured response from LLM: tool='end' tool_query=None response="Nelson Mandela was a South African anti-apartheid activist and politician who served as the first president of South Africa from 1994 to 1999. He was the country's first black head of state and focused on dismantling the legacy of apartheid by fostering racial reconciliation. Mandela was born on July 18, 1918, and died on December 5, 2013, after serving 27 years in prison for his fight against apartheid." sources=['https://en.wikipedia.org/wiki/Nelson_Mandela']
2025-06-03 11:31:02,371 - INFO - Agentmain.py:397 - Handled tool response for end
2025-06-03 11:31:02,559 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 11:31:02,560 - INFO - Agentmain.py:648 - Using LLM-provided final response: Nelson Mandela was a South African anti-apartheid activist and politician who served as the first president of South Africa from 1994 to 1999. He was the country's first black head of state and focused on dismantling the legacy of apartheid by fostering racial reconciliation. Mandela was born on July 18, 1918, and died on December 5, 2013, after serving 27 years in prison for his fight against apartheid.
2025-06-03 12:23:14,475 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-03 12:23:14,991 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-03 12:23:15,052 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-03 12:23:15,052 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-03 12:23:55,662 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 12:23:55,662 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 12:23:55,752 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 12:23:55,752 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 12:23:59,268 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="Nelson Mandela was a South African anti-apartheid revolutionary and politician who served as President of South Africa from 1994 to 1999. He was the country's first black head of state and the first elected in a fully representative democratic election." sources=None
2025-06-03 12:23:59,268 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="Nelson Mandela was a South African anti-apartheid revolutionary and politician who served as President of South Africa from 1994 to 1999. He was the country's first black head of state and the first elected in a fully representative democratic election." sources=None
2025-06-03 12:23:59,268 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 12:23:59,385 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 12:23:59,385 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="Nelson Mandela was a South African anti-apartheid revolutionary and politician who served as President of South Africa from 1994 to 1999. He was the country's first black head of state and the first elected in a fully representative democratic election." sources=None
2025-06-03 12:24:31,271 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 12:24:31,272 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 12:24:31,363 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 12:24:31,364 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 12:24:36,348 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='You previously asked about Albert Einstein from Wikipedia. The information about Albert Einstein is already available in our previous conversation. If you need more information, please let me know.' sources=None
2025-06-03 12:24:36,348 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='You previously asked about Albert Einstein from Wikipedia. The information about Albert Einstein is already available in our previous conversation. If you need more information, please let me know.' sources=None
2025-06-03 12:24:36,355 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 12:24:36,440 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 12:24:36,440 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='You previously asked about Albert Einstein from Wikipedia. The information about Albert Einstein is already available in our previous conversation. If you need more information, please let me know.' sources=None
2025-06-03 12:25:32,799 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 12:25:32,799 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 12:25:32,876 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 12:25:32,878 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 12:25:34,140 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='news' tool_query='corona news' response=None sources=None
2025-06-03 12:25:34,141 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='news' tool_query='corona news' response=None sources=None
2025-06-03 12:25:34,142 - INFO - Agentmain.py:400 - Decided next tool: news
2025-06-03 12:25:34,144 - INFO - Agentmain.py:495 - Entered News Summary Node
2025-06-03 12:25:37,870 - INFO - Agentmain.py:533 - Structured News summary: summary="## Secretary Kennedy announces the CDC is changing COVID-19 vaccine recommendations\n\n## More Covid news\n\n## [Coronavirus](https://www.nbcnews.com/health/coronavirus)\n\n## [Coronavirus](https://www.nbcnews.com/health/coronavirus)\n\n## 5 years later, long Covid is still a medical mystery. Here's what scientists have learned. [...] ## [Coronavirus](https://www.nbcnews.com/health/coronavirus)\n\n## [Coronavirus](https://www.nbcnews.com/health/coronavirus)\n\n## FDA approves new Covid vaccines from Pfizer and Moderna [...] ## [Coronavirus](https://www.nbcnews.com/health/coronavirus)\n\n## [Coronavirus](https://www.nbcnews.com/health/coronavirus)\n\n## FDA authorizes Novavax's updated Covid vaccine targeting JN.1 strain\nEverything you need to know about coronavirus, including the latest news, how it is impacting our lives, and how to prepare and protect yourself.\nPfizer researchers identified an oral protease inhibitor to progress into clinical studies. On December 22, 2021, the U.S. Food and Drug Administration (FDA) granted Emergency Use Authorization (EUA) for the treatment of eligible patients diagnosed with COVID-19 at high risk of progressing to severe illness. On May 25, 2023, the FDA approved the treatment for mild-to-moderate COVID-19 in adults who are at high risk for progression to severe COVID-19, including hospitalization or death. [...] [https://www.who.int/news/item/05-05-2023-statement-on-the-fifteenth-meeting-of-the-international-health-regulations-(2005)-emergency-committee-regarding-the-coronavirus-disease-(covid-19)-pandemic](https://www.who.int/news/item/05-05-2023-statement-on-the-fifteenth-meeting-of-the-international-health-regulations-(2005)-emergency-committee-regarding-the-coronavirus-disease-(covid-19)-pandemic). Published May 5, 2023. Accessed May 8, 2023. [...] **_U.S. FDA Emergency Use Authorization Statement_**\n\n_The U.S. Food and Drug Administration (FDA) has issued an Emergency Use Authorization (EUA) for the emergency use of PAXLOVID for the treatment of adults and pediatric patients (12 years of age and older weighing at least 40 kg) with mild-to-moderate coronavirus disease 2019 (COVID-19) and who are at high risk for progression to severe COVID-19, including hospitalization or death._\nCoronavirus\n===========\n\nLatest News\n----------- [...] [next page](https://www.bbc.com/news/coronavirus?page=2) [...] *   [Tech](https://www.bbc.com/news/technology)\nAs of March 7, 2023, all data on COVID-19 cases and deaths are drawn from the World Health Organization’s (WHO) Coronavirus (COVID-19) Dashboard. Prior to March 7, 2023, this tracker relied on data provided by the Johns Hopkins University (JHU) Coronavirus Resource Center’s COVID-19 Map, which ended on March 10, 2023. While the tracker provides the most recent data available, there is a two-week lag in the data reporting. Note: The data in this tool were corrected on March 18, 2024, to clarify that they represent new cases and deaths over a full week rather than the average per day over a seven-day period. The independent source for health policy research, polling, and news, KFF is a nonprofit organization based in San Francisco, California." sources=['https://www.nbcnews.com/health/coronavirus', 'https://www.nytimes.com/news-event/coronavirus', 'https://www.pfizer.com/science/coronavirus-resources', 'https://www.bbc.com/news/coronavirus', 'https://www.kff.org/coronavirus-covid-19/issue-brief/global-covid-19-tracker/']
2025-06-03 12:25:37,870 - INFO - Agentmain.py:537 - News summary retrieved: 3163 chars
2025-06-03 12:25:37,870 - INFO - Agentmain.py:561 - Exiting News Summary Node
2025-06-03 12:25:37,940 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 12:25:37,940 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 12:25:38,006 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 12:25:38,007 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 12:25:38,014 - INFO - Agentmain.py:262 - Message to LLM: 
You are an AI assistant that helps summarize news information.

The following content has been retrieved in response to a user's query. Your task is to analyze this content and generate a clear, concise, and factual answer in 2-3 sentences that directly addresses the user's query.

If the content is not relevant or no summary can be made, respond with: "No recent news could be found."

IMPORTANT:
- Your output must be a single JSON object with keys: "tool", "tool_query", and "response".
- Set "tool" to "end".
- Set "tool_query" to null.
- Write your answer in the "response" field.
- Optionally, fill "sources" with any relevant URLs or citations.
- **Do NOT include any comments, explanations, or extra text. Only output the JSON object.**

Previous assistant response: tool='news' tool_query='corona news' response=None sources=None

News content: ## Secretary Kennedy announces the CDC is changing COVID-19 vaccine recommendations

## More Covid news

## [Coronavirus](https://www.nbcnews.com/health/coronavirus)

## [Coronavirus](https://www.nbcnews.com/health/coronavirus)

## 5 years later, long Covid is still a medical mystery. Here's what scientists have learned. [...] ## [Coronavirus](https://www.nbcnews.com/health/coronavirus)

## [Coronavirus](https://www.nbcnews.com/health/coronavirus)

## FDA approves new Covid vaccines from Pfizer and Moderna [...] ## [Coronavirus](https://www.nbcnews.com/health/coronavirus)

## [Coronavirus](https://www.nbcnews.com/health/coronavirus)

## FDA authorizes Novavax's updated Covid vaccine targeting JN.1 strain
Everything you need to know about coronavirus, including the latest news, how it is impacting our lives, and how to prepare and protect yourself.
Pfizer researchers identified an oral protease inhibitor to progress into clinical studies. On December 22, 2021, the U.S. Food and Drug Administration (FDA) granted Emergency Use Authorization (EUA) for the treatment of eligible patients diagnosed with COVID-19 at high risk of progressing to severe illness. On May 25, 2023, the FDA approved the treatment for mild-to-moderate COVID-19 in adults who are at high risk for progression to severe COVID-19, including hospitalization or death. [...] [https://www.who.int/news/item/05-05-2023-statement-on-the-fifteenth-meeting-of-the-international-health-regulations-(2005)-emergency-committee-regarding-the-coronavirus-disease-(covid-19)-pandemic](https://www.who.int/news/item/05-05-2023-statement-on-the-fifteenth-meeting-of-the-international-health-regulations-(2005)-emergency-committee-regarding-the-coronavirus-disease-(covid-19)-pandemic). Published May 5, 2023. Accessed May 8, 2023. [...] **_U.S. FDA Emergency Use Authorization Statement_**

_The U.S. Food and Drug Administration (FDA) has issued an Emergency Use Authorization (EUA) for the emergency use of PAXLOVID for the treatment of adults and pediatric patients (12 years of age and older weighing at least 40 kg) with mild-to-moderate coronavirus disease 2019 (COVID-19) and who are at high risk for progression to severe COVID-19, including hospitalization or death._
Coronavirus
===========

Latest News
----------- [...] [next page](https://www.bbc.com/news/coronavirus?page=2) [...] *   [Tech](https://www.bbc.com/news/technology)
As of March 7, 2023, all data on COVID-19 cases and deaths are drawn from the World Health Organization’s (WHO) Coronavirus (COVID-19) Dashboard. Prior to March 7, 2023, this tracker relied on data provided by the Johns Hopkins University (JHU) Coronavirus Resource Center’s COVID-19 Map, which ended on March 10, 2023. While the tracker provides the most recent data available, there is a two-week lag in the data reporting. Note: The data in this tool were corrected on March 18, 2024, to clarify that they represent new cases and deaths over a full week rather than the average per day over a seven-day period. The independent source for health policy research, polling, and news, KFF is a nonprofit organization based in San Francisco, California.

2025-06-03 12:25:39,090 - INFO - Agentmain.py:265 - Structured response from LLM: tool='end' tool_query=None response="The CDC has changed COVID-19 vaccine recommendations, and the FDA has approved new Covid vaccines from Pfizer and Moderna, as well as authorized Novavax's updated Covid vaccine targeting the JN.1 strain. Long Covid remains a medical mystery, but scientists have made progress in understanding it. For the latest information on coronavirus, visit the World Health Organization's Coronavirus Dashboard or the CDC's website." sources=['https://www.nbcnews.com/health/coronavirus', 'https://www.who.int/news/item/05-05-2023-statement-on-the-fifteenth-meeting-of-the-international-health-regulations-(2005)-emergency-committee-regarding-the-coronavirus-disease-(covid-19)-pandemic']
2025-06-03 12:25:39,201 - INFO - Agentmain.py:397 - Handled tool response for end
2025-06-03 12:25:39,390 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 12:25:39,390 - INFO - Agentmain.py:648 - Using LLM-provided final response: The CDC has changed COVID-19 vaccine recommendations, and the FDA has approved new Covid vaccines from Pfizer and Moderna, as well as authorized Novavax's updated Covid vaccine targeting the JN.1 strain. Long Covid remains a medical mystery, but scientists have made progress in understanding it. For the latest information on coronavirus, visit the World Health Organization's Coronavirus Dashboard or the CDC's website.
2025-06-03 12:29:13,212 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-03 12:29:13,603 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-03 12:29:13,649 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-03 12:29:13,653 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-03 12:29:24,241 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 12:29:24,241 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 12:29:24,330 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 12:29:24,330 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 12:29:31,398 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='You previously asked about Mahabharat from Wikipedia. The information about Mahabharat is already available in our previous conversation. If you need more information, please let me know.' sources=None
2025-06-03 12:29:31,398 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='You previously asked about Mahabharat from Wikipedia. The information about Mahabharat is already available in our previous conversation. If you need more information, please let me know.' sources=None
2025-06-03 12:29:31,403 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 12:29:31,507 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 12:29:31,508 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='You previously asked about Mahabharat from Wikipedia. The information about Mahabharat is already available in our previous conversation. If you need more information, please let me know.' sources=None
2025-06-03 14:12:32,086 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-03 14:12:32,233 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-03 14:12:32,253 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-03 14:12:32,255 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-03 14:15:03,844 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-03 14:15:03,919 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-03 14:15:03,927 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-03 14:15:03,929 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-03 14:15:28,457 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 14:15:28,457 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 14:15:28,481 - INFO - Agentmain.py:144 - Found 1 similar memories and 0 summaries.
2025-06-03 14:15:28,482 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 14:15:28,484 - ERROR - Agentmain.py:193 - LLM decision error: '\n  "tool"'
2025-06-03 14:15:28,484 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 14:15:28,485 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 14:15:30,574 - ERROR - Agentmain.py:708 - Error generating final response: Error code: 400 - {'error': {'message': "Failed to call a function. Please adjust your prompt. See 'failed_generation' for more details.", 'type': 'invalid_request_error', 'code': 'tool_use_failed', 'failed_generation': '<function=FinalResponseOutput>{"content": {"tool": "end", "tool_query": null, "response": "Hello! It\'s nice to meet you. I\'m here to help answer any questions you have, but I didn\'t receive a specific question from you. If you\'d like to ask something, I\'ll do my best to provide a helpful and accurate response.", "sources": []}}</function>'}}
2025-06-03 14:16:46,703 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-03 14:16:46,767 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-03 14:16:46,772 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-03 14:16:46,773 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-03 14:16:47,023 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 14:16:47,024 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 14:16:47,056 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 14:16:47,056 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 14:16:47,059 - ERROR - Agentmain.py:193 - LLM decision error: '\n  "tool"'
2025-06-03 14:16:47,059 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 14:16:47,061 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 14:16:53,261 - INFO - Agentmain.py:704 - Generated final response: Hello, it's nice to meet you. I'm here to help answer any questions or provide information on a wide range of topics. Since you haven't asked a specific question yet, I'm not sure what you're looking for, but I'm ready to help whenever you are.
2025-06-03 14:17:28,482 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 14:17:28,482 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 14:17:28,508 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 14:17:28,509 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 14:17:28,510 - ERROR - Agentmain.py:193 - LLM decision error: '\n  "tool"'
2025-06-03 14:17:28,511 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 14:17:28,512 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 14:17:44,313 - INFO - Agentmain.py:704 - Generated final response: Lord Ram, also known as Rama, is a major deity in Hinduism and is considered the seventh avatar of the god Vishnu. He is the main character in the Hindu epic, the Ramayana, which tells the story of his life, including his birth, marriage to Sita, exile, and battle against the demon king Ravana. Lord Ram is revered for his righteousness, courage, and devotion to his family and duty. He is often worshipped as a symbol of ideal manhood and is considered a role model for many Hindus. Unfortunately, no additional information was collected, and there are no specific sources available to provide further details.
2025-06-03 14:18:08,518 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 14:18:08,518 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 14:18:08,549 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 14:18:08,549 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 14:18:08,551 - ERROR - Agentmain.py:193 - LLM decision error: '\n  "tool"'
2025-06-03 14:18:08,551 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 14:18:08,553 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 14:18:13,724 - INFO - Agentmain.py:704 - Generated final response: {"tool": "end", "tool_query": null, "response": "Lord Ram, also known as Rama, is a major deity in Hinduism. He is considered the seventh avatar of the god Vishnu and is worshiped by Hindus as the ideal man and a symbol of righteousness. According to the Hindu epic, the Ramayana, Lord Ram was a king of Ayodhya who was exiled to the forest for 14 years. During his exile, he fought against the demon king Ravana and eventually defeated him to rescue his wife, Sita. Lord Ram is revered for his bravery, loyalty, and devotion to his duty. However, due to the lack of specific information from the tools, I was unable to provide more detailed information from Wikipedia about Lord Ram.", "sources": []}
2025-06-03 14:20:08,187 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-03 14:20:08,266 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-03 14:20:08,274 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-03 14:20:08,275 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-03 14:20:11,415 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 14:20:11,415 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 14:20:11,424 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 14:20:11,440 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 14:20:11,440 - ERROR - Agentmain.py:193 - LLM decision error: '\n  "tool"'
2025-06-03 14:20:11,440 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 14:20:11,440 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 14:20:21,233 - ERROR - Agentmain.py:708 - Error generating final response: Error code: 400 - {'error': {'message': "Failed to call a function. Please adjust your prompt. See 'failed_generation' for more details.", 'type': 'invalid_request_error', 'code': 'tool_use_failed', 'failed_generation': '<function=FinalResponseOutput>{"tool": "end", "tool_query": null, "response": "Lord Ram, also known as Rama, is a major deity in Hinduism and the seventh incarnation of Lord Vishnu. He is the main character in the Hindu epic, the Ramayana. Unfortunately, I couldn\'t gather more specific information about Lord Ram. If you\'re looking for more details, I recommend consulting a reliable source or a Hindu scripture for a more comprehensive understanding.", "sources": []}</function>'}}
2025-06-03 14:20:42,736 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 14:20:42,736 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 14:20:42,762 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 14:20:42,763 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 14:20:42,764 - ERROR - Agentmain.py:193 - LLM decision error: '\n  "tool"'
2025-06-03 14:20:42,765 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 14:20:42,766 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 14:20:53,548 - ERROR - Agentmain.py:708 - Error generating final response: Error code: 400 - {'error': {'message': "Failed to call a function. Please adjust your prompt. See 'failed_generation' for more details.", 'type': 'invalid_request_error', 'code': 'tool_use_failed', 'failed_generation': '<function=FinalResponseOutput>{"content": {"tool": "end", "tool_query": null, "response": "Lord Ram, also known as Rama, is a major deity in Hinduism and the seventh avatar of the god Vishnu. He is the main character in the ancient Indian epic, the Ramayana, which tells the story of his life, including his banishment to the forest, his wife Sita\'s abduction by the demon king Ravana, and his ultimate victory over Ravana. Lord Ram is revered for his bravery, honor, and devotion to his duty and family. However, as no additional information was gathered, this response is limited in its scope. If you\'re looking for more specific or detailed information about Lord Ram, I recommend consulting a reliable source or a Hindu scripture for a more comprehensive understanding.", "sources": []}}</function>'}}
2025-06-03 14:44:23,106 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-03 14:44:23,220 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-03 14:44:23,233 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-03 14:44:23,234 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-03 14:45:13,630 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 14:45:13,630 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 14:45:13,656 - INFO - Agentmain.py:144 - Found 1 similar memories and 0 summaries.
2025-06-03 14:45:13,656 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 14:45:13,659 - ERROR - Agentmain.py:193 - LLM decision error: '\n  "tool"'
2025-06-03 14:45:13,659 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 14:45:13,662 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 14:45:17,660 - INFO - Agentmain.py:704 - Generated final response: Hello! It's nice to meet you. I'm here to help answer any questions you may have. Unfortunately, I didn't receive any specific question from you, so I'm not sure what information to provide. If you could provide more context or clarify what you're looking for, I'd be happy to try and assist you. Please let me know how I can help. {"tool": "end", "tool_query": null, "response": "Hello! It's nice to meet you. I'm here to help answer any questions you may have. Unfortunately, I didn't receive any specific question from you, so I'm not sure what information to provide. If you could provide more context or clarify what you're looking for, I'd be happy to try and assist you. Please let me know how I can help.", "sources": []}
2025-06-03 15:10:19,912 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-03 15:10:20,049 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-03 15:10:20,063 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-03 15:10:20,065 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-03 15:10:20,420 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 15:10:20,420 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 15:10:20,459 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 15:10:20,460 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 15:11:14,979 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 15:11:14,980 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 15:11:15,007 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 15:11:15,007 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 15:11:21,388 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="Hello! It's nice to meet you. I'm here to help answer any questions you may have. Unfortunately, I didn't receive any specific question from you, so I'm not sure what information to provide. If you could provide more context or clarify what you're looking for, I'd be happy to try and assist you. Please let me know how I can help." sources=[]
2025-06-03 15:11:21,388 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="Hello! It's nice to meet you. I'm here to help answer any questions you may have. Unfortunately, I didn't receive any specific question from you, so I'm not sure what information to provide. If you could provide more context or clarify what you're looking for, I'd be happy to try and assist you. Please let me know how I can help." sources=[]
2025-06-03 15:11:21,388 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 15:11:21,436 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 15:11:21,436 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="Hello! It's nice to meet you. I'm here to help answer any questions you may have. Unfortunately, I didn't receive any specific question from you, so I'm not sure what information to provide. If you could provide more context or clarify what you're looking for, I'd be happy to try and assist you. Please let me know how I can help." sources=[]
2025-06-03 15:11:33,199 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Hello again! Is there something I can help you with today?' sources=[]
2025-06-03 15:11:33,200 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Hello again! Is there something I can help you with today?' sources=[]
2025-06-03 15:11:33,200 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 15:11:33,223 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 15:11:33,223 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Hello again! Is there something I can help you with today?' sources=[]
2025-06-03 15:15:28,742 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-03 15:15:28,824 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-03 15:15:28,832 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-03 15:15:28,833 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-03 15:15:29,100 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 15:15:29,101 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 15:15:29,143 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 15:15:29,143 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 15:15:30,639 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Hello again! Is there something I can help you with?' sources=[]
2025-06-03 15:15:30,640 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Hello again! Is there something I can help you with?' sources=[]
2025-06-03 15:15:30,640 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 15:15:30,668 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 15:15:30,668 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Hello again! Is there something I can help you with?' sources=[]
2025-06-03 15:26:45,339 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-03 15:26:45,422 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-03 15:26:45,435 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-03 15:26:45,437 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-03 15:27:02,719 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 15:27:02,719 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 15:27:02,745 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 15:27:02,745 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 15:27:10,839 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Hello again! Is there something I can help you with?' sources=[]
2025-06-03 15:27:10,839 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Hello again! Is there something I can help you with?' sources=[]
2025-06-03 15:27:10,839 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 15:27:10,863 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 15:27:10,863 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Hello again! Is there something I can help you with?' sources=[]
2025-06-03 15:29:12,748 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-03 15:29:12,827 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-03 15:29:12,827 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-03 15:29:12,827 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-03 15:29:20,523 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 15:29:20,523 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 15:29:20,548 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 15:29:20,548 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 15:29:22,620 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Hello again, how can I help you today?' sources=[]
2025-06-03 15:29:22,621 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Hello again, how can I help you today?' sources=[]
2025-06-03 15:29:22,621 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 15:29:22,648 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 15:29:22,649 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Hello again, how can I help you today?' sources=[]
2025-06-03 15:30:36,340 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 15:30:36,340 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 15:30:36,355 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 15:30:36,355 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 15:31:13,285 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='wikipedia' tool_query='ai' response=None sources=[]
2025-06-03 15:31:13,285 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='wikipedia' tool_query='ai' response=None sources=[]
2025-06-03 15:31:13,286 - INFO - Agentmain.py:400 - Decided next tool: wikipedia
2025-06-03 15:31:13,287 - INFO - Agentmain.py:449 - Entered Wikipedia Search Node
2025-06-03 15:31:18,977 - INFO - Agentmain.py:467 - Structured Wikipedia summary: summary='Page: Artificial intelligence\nSummary: Artificial intelligence (AI) is the capability of computational systems to perform tasks typically associated with human intelligence, such as learning, reasoning, problem-solving, perception, and decision-making. It is a field of research in computer science that develops and studies methods and software that enable machines to perceive their environment and use learning and intelligence to take actions that maximize their chances of achieving defined goals.\nHigh-profile applications of AI include advanced web search engines (e.g., Google Search); recommendation systems (used by YouTube, Amazon, and Netflix); virtual assistants (e.g., Google Assistant, Siri, and Alexa); autonomous vehicles (e.g., Waymo); generative and creative tools (e.g., ChatGPT and AI art); and superhuman play and analysis in strategy games (e.g., chess and Go). However, many AI applications are not perceived as AI: "A lot of cutting edge AI has filtered into general applications, often without being called AI because once something becomes useful enough and common enough it\'s not labeled AI anymore."\nVarious subfields of AI research are centered around particular goals and the use of particular tools. The traditional goals of AI research include learning, reasoning, knowledge representation, planning, natural language processing, perception, and support for robotics. To reach these goals, AI researchers have adapted and integrated a wide range of techniques, including search and mathematical optimization, formal logic, artificial neural networks, and methods based on statistics, operations research, and economics. AI also draws upon psychology, linguistics, philosophy, neuroscience, and other fields. Some companies, such as OpenAI, Google DeepMind and Meta, aim to create artificial general intelligence (AGI)—AI that can complete virtually any cognitive task at least as well as a human.\nArtificial intelligence was founded as an academic discipline in 1956,' page_title=None url=None
2025-06-03 15:31:18,978 - INFO - Agentmain.py:470 - Wikipedia summary retrieved: Page: Artificial intelligence
Summary: Artificial intelligence (AI) is the capability of computational systems to perform tasks typically associated with human intelligence, such as learning, reasoning, problem-solving, perception, and decision-making. It is a field of research in computer science that develops and studies methods and software that enable machines to perceive their environment and use learning and intelligence to take actions that maximize their chances of achieving defined goals.
High-profile applications of AI include advanced web search engines (e.g., Google Search); recommendation systems (used by YouTube, Amazon, and Netflix); virtual assistants (e.g., Google Assistant, Siri, and Alexa); autonomous vehicles (e.g., Waymo); generative and creative tools (e.g., ChatGPT and AI art); and superhuman play and analysis in strategy games (e.g., chess and Go). However, many AI applications are not perceived as AI: "A lot of cutting edge AI has filtered into general applications, often without being called AI because once something becomes useful enough and common enough it's not labeled AI anymore."
Various subfields of AI research are centered around particular goals and the use of particular tools. The traditional goals of AI research include learning, reasoning, knowledge representation, planning, natural language processing, perception, and support for robotics. To reach these goals, AI researchers have adapted and integrated a wide range of techniques, including search and mathematical optimization, formal logic, artificial neural networks, and methods based on statistics, operations research, and economics. AI also draws upon psychology, linguistics, philosophy, neuroscience, and other fields. Some companies, such as OpenAI, Google DeepMind and Meta, aim to create artificial general intelligence (AGI)—AI that can complete virtually any cognitive task at least as well as a human.
Artificial intelligence was founded as an academic discipline in 1956,
2025-06-03 15:31:18,997 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 15:31:18,997 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 15:31:19,018 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 15:31:19,019 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 15:31:19,020 - INFO - Agentmain.py:262 - Message to LLM: 
You are an AI assistant that helps summarize factual information obtained from Wikipedia.

The following content has been retrieved from Wikipedia in response to a user's query. Your task is to analyze this content and generate a clear, concise, and factual answer in 2-3 sentences that directly addresses the user's query.

If irrelevant or insufficient, respond: "No relevant information could be found on Wikipedia."


IMPORTANT:
- Respond with a JSON object: "tool", "tool_query", "response", "sources".
- Set "tool" to "end"
- Set "tool_query" to null
- Place your answer in "response"
- Use an empty list `[]` for "sources" if none

Do not add comments or extra text.                          

Previous assistant response: tool='wikipedia' tool_query='ai' response=None sources=[]

Wikipedia content: Page: Artificial intelligence
Summary: Artificial intelligence (AI) is the capability of computational systems to perform tasks typically associated with human intelligence, such as learning, reasoning, problem-solving, perception, and decision-making. It is a field of research in computer science that develops and studies methods and software that enable machines to perceive their environment and use learning and intelligence to take actions that maximize their chances of achieving defined goals.
High-profile applications of AI include advanced web search engines (e.g., Google Search); recommendation systems (used by YouTube, Amazon, and Netflix); virtual assistants (e.g., Google Assistant, Siri, and Alexa); autonomous vehicles (e.g., Waymo); generative and creative tools (e.g., ChatGPT and AI art); and superhuman play and analysis in strategy games (e.g., chess and Go). However, many AI applications are not perceived as AI: "A lot of cutting edge AI has filtered into general applications, often without being called AI because once something becomes useful enough and common enough it's not labeled AI anymore."
Various subfields of AI research are centered around particular goals and the use of particular tools. The traditional goals of AI research include learning, reasoning, knowledge representation, planning, natural language processing, perception, and support for robotics. To reach these goals, AI researchers have adapted and integrated a wide range of techniques, including search and mathematical optimization, formal logic, artificial neural networks, and methods based on statistics, operations research, and economics. AI also draws upon psychology, linguistics, philosophy, neuroscience, and other fields. Some companies, such as OpenAI, Google DeepMind and Meta, aim to create artificial general intelligence (AGI)—AI that can complete virtually any cognitive task at least as well as a human.
Artificial intelligence was founded as an academic discipline in 1956,

2025-06-03 15:31:21,709 - INFO - Agentmain.py:265 - Structured response from LLM: tool='end' tool_query=None response='Artificial intelligence (AI) refers to the capability of computational systems to perform tasks associated with human intelligence, such as learning and problem-solving. AI is a field of research in computer science that has led to various applications, including virtual assistants and autonomous vehicles. The goal of AI research is to create systems that can perceive their environment and take actions to achieve defined goals.' sources=[]
2025-06-03 15:31:21,749 - INFO - Agentmain.py:397 - Handled tool response for end
2025-06-03 15:31:21,802 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 15:31:21,802 - INFO - Agentmain.py:648 - Using LLM-provided final response: Artificial intelligence (AI) refers to the capability of computational systems to perform tasks associated with human intelligence, such as learning and problem-solving. AI is a field of research in computer science that has led to various applications, including virtual assistants and autonomous vehicles. The goal of AI research is to create systems that can perceive their environment and take actions to achieve defined goals.
2025-06-03 15:50:05,451 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 15:50:05,451 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 15:50:05,481 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 15:50:05,481 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 15:50:07,415 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='wikipedia' tool_query='ai' response=None sources=[]
2025-06-03 15:50:07,415 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='wikipedia' tool_query='ai' response=None sources=[]
2025-06-03 15:50:07,415 - INFO - Agentmain.py:400 - Decided next tool: wikipedia
2025-06-03 15:50:07,415 - INFO - Agentmain.py:449 - Entered Wikipedia Search Node
2025-06-03 15:50:13,623 - INFO - Agentmain.py:467 - Structured Wikipedia summary: summary='Page: Artificial intelligence\nSummary: Artificial intelligence (AI) is the capability of computational systems to perform tasks typically associated with human intelligence, such as learning, reasoning, problem-solving, perception, and decision-making. It is a field of research in computer science that develops and studies methods and software that enable machines to perceive their environment and use learning and intelligence to take actions that maximize their chances of achieving defined goals.\nHigh-profile applications of AI include advanced web search engines (e.g., Google Search); recommendation systems (used by YouTube, Amazon, and Netflix); virtual assistants (e.g., Google Assistant, Siri, and Alexa); autonomous vehicles (e.g., Waymo); generative and creative tools (e.g., ChatGPT and AI art); and superhuman play and analysis in strategy games (e.g., chess and Go). However, many AI applications are not perceived as AI: "A lot of cutting edge AI has filtered into general applications, often without being called AI because once something becomes useful enough and common enough it\'s not labeled AI anymore."\nVarious subfields of AI research are centered around particular goals and the use of particular tools. The traditional goals of AI research include learning, reasoning, knowledge representation, planning, natural language processing, perception, and support for robotics. To reach these goals, AI researchers have adapted and integrated a wide range of techniques, including search and mathematical optimization, formal logic, artificial neural networks, and methods based on statistics, operations research, and economics. AI also draws upon psychology, linguistics, philosophy, neuroscience, and other fields. Some companies, such as OpenAI, Google DeepMind and Meta, aim to create artificial general intelligence (AGI)—AI that can complete virtually any cognitive task at least as well as a human.\nArtificial intelligence was founded as an academic discipline in 1956,' page_title=None url=None
2025-06-03 15:50:13,624 - INFO - Agentmain.py:470 - Wikipedia summary retrieved: Page: Artificial intelligence
Summary: Artificial intelligence (AI) is the capability of computational systems to perform tasks typically associated with human intelligence, such as learning, reasoning, problem-solving, perception, and decision-making. It is a field of research in computer science that develops and studies methods and software that enable machines to perceive their environment and use learning and intelligence to take actions that maximize their chances of achieving defined goals.
High-profile applications of AI include advanced web search engines (e.g., Google Search); recommendation systems (used by YouTube, Amazon, and Netflix); virtual assistants (e.g., Google Assistant, Siri, and Alexa); autonomous vehicles (e.g., Waymo); generative and creative tools (e.g., ChatGPT and AI art); and superhuman play and analysis in strategy games (e.g., chess and Go). However, many AI applications are not perceived as AI: "A lot of cutting edge AI has filtered into general applications, often without being called AI because once something becomes useful enough and common enough it's not labeled AI anymore."
Various subfields of AI research are centered around particular goals and the use of particular tools. The traditional goals of AI research include learning, reasoning, knowledge representation, planning, natural language processing, perception, and support for robotics. To reach these goals, AI researchers have adapted and integrated a wide range of techniques, including search and mathematical optimization, formal logic, artificial neural networks, and methods based on statistics, operations research, and economics. AI also draws upon psychology, linguistics, philosophy, neuroscience, and other fields. Some companies, such as OpenAI, Google DeepMind and Meta, aim to create artificial general intelligence (AGI)—AI that can complete virtually any cognitive task at least as well as a human.
Artificial intelligence was founded as an academic discipline in 1956,
2025-06-03 15:50:13,642 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 15:50:13,642 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 15:50:13,663 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 15:50:13,663 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 15:50:13,665 - INFO - Agentmain.py:262 - Message to LLM: 
You are an AI assistant that helps summarize factual information obtained from Wikipedia.

The following content has been retrieved from Wikipedia in response to a user's query. Your task is to analyze this content and generate a clear, concise, and factual answer in 2-3 sentences that directly addresses the user's query.

If irrelevant or insufficient, respond: "No relevant information could be found on Wikipedia."


IMPORTANT:
- Respond with a JSON object: "tool", "tool_query", "response", "sources".
- Set "tool" to "end"
- Set "tool_query" to null
- Place your answer in "response"
- Use an empty list `[]` for "sources" if none

Do not add comments or extra text.                          

Previous assistant response: tool='wikipedia' tool_query='ai' response=None sources=[]

Wikipedia content: Page: Artificial intelligence
Summary: Artificial intelligence (AI) is the capability of computational systems to perform tasks typically associated with human intelligence, such as learning, reasoning, problem-solving, perception, and decision-making. It is a field of research in computer science that develops and studies methods and software that enable machines to perceive their environment and use learning and intelligence to take actions that maximize their chances of achieving defined goals.
High-profile applications of AI include advanced web search engines (e.g., Google Search); recommendation systems (used by YouTube, Amazon, and Netflix); virtual assistants (e.g., Google Assistant, Siri, and Alexa); autonomous vehicles (e.g., Waymo); generative and creative tools (e.g., ChatGPT and AI art); and superhuman play and analysis in strategy games (e.g., chess and Go). However, many AI applications are not perceived as AI: "A lot of cutting edge AI has filtered into general applications, often without being called AI because once something becomes useful enough and common enough it's not labeled AI anymore."
Various subfields of AI research are centered around particular goals and the use of particular tools. The traditional goals of AI research include learning, reasoning, knowledge representation, planning, natural language processing, perception, and support for robotics. To reach these goals, AI researchers have adapted and integrated a wide range of techniques, including search and mathematical optimization, formal logic, artificial neural networks, and methods based on statistics, operations research, and economics. AI also draws upon psychology, linguistics, philosophy, neuroscience, and other fields. Some companies, such as OpenAI, Google DeepMind and Meta, aim to create artificial general intelligence (AGI)—AI that can complete virtually any cognitive task at least as well as a human.
Artificial intelligence was founded as an academic discipline in 1956,

2025-06-03 15:50:15,056 - INFO - Agentmain.py:265 - Structured response from LLM: tool='end' tool_query=None response='Artificial intelligence (AI) refers to the capability of computational systems to perform tasks associated with human intelligence, such as learning and problem-solving. AI is a field of research in computer science that develops methods and software to enable machines to perceive their environment and take actions to achieve defined goals. AI has various applications, including web search engines, virtual assistants, and autonomous vehicles.' sources=[]
2025-06-03 15:50:15,112 - INFO - Agentmain.py:397 - Handled tool response for end
2025-06-03 15:50:15,177 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 15:50:15,177 - INFO - Agentmain.py:648 - Using LLM-provided final response: Artificial intelligence (AI) refers to the capability of computational systems to perform tasks associated with human intelligence, such as learning and problem-solving. AI is a field of research in computer science that develops methods and software to enable machines to perceive their environment and take actions to achieve defined goals. AI has various applications, including web search engines, virtual assistants, and autonomous vehicles.
2025-06-03 15:52:21,591 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 15:52:21,591 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 15:52:21,612 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 15:52:21,612 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 15:52:25,123 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="I'm a smart, multi-tool assistant designed to answer user queries by deciding which tool to use and generating appropriate responses. My work involves providing information and answering questions to the best of my abilities using various tools such as Wikipedia, news, web search, and more." sources=[]
2025-06-03 15:52:25,123 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="I'm a smart, multi-tool assistant designed to answer user queries by deciding which tool to use and generating appropriate responses. My work involves providing information and answering questions to the best of my abilities using various tools such as Wikipedia, news, web search, and more." sources=[]
2025-06-03 15:52:25,123 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 15:52:25,155 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 15:52:25,155 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="I'm a smart, multi-tool assistant designed to answer user queries by deciding which tool to use and generating appropriate responses. My work involves providing information and answering questions to the best of my abilities using various tools such as Wikipedia, news, web search, and more." sources=[]
2025-06-03 15:53:23,306 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 15:53:23,306 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 15:53:23,331 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 15:53:23,331 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 15:53:24,832 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="Your first question was 'hello'." sources=[]
2025-06-03 15:53:24,832 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="Your first question was 'hello'." sources=[]
2025-06-03 15:53:24,833 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 15:53:24,854 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 15:53:24,854 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="Your first question was 'hello'." sources=[]
2025-06-03 15:54:50,745 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-03 15:54:50,847 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-03 15:54:50,860 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-03 15:54:50,862 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-03 15:56:27,771 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-03 15:56:28,015 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-03 15:56:28,067 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-03 15:56:28,069 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-03 15:57:33,254 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-03 15:57:33,384 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-03 15:57:33,389 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-03 15:57:33,390 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-03 16:03:40,859 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-03 16:03:40,952 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-03 16:03:40,967 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-03 16:03:40,969 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-03 16:06:19,507 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 16:06:19,507 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 16:06:19,543 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 16:06:19,543 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 16:06:25,745 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="You asked me to remind you of any important question you asked, but this is the beginning of our conversation, and you haven't asked any questions yet. If you ask something, I'll be happy to remind you later." sources=[]
2025-06-03 16:06:25,745 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="You asked me to remind you of any important question you asked, but this is the beginning of our conversation, and you haven't asked any questions yet. If you ask something, I'll be happy to remind you later." sources=[]
2025-06-03 16:06:25,745 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 16:06:25,803 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 16:06:25,804 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="You asked me to remind you of any important question you asked, but this is the beginning of our conversation, and you haven't asked any questions yet. If you ask something, I'll be happy to remind you later." sources=[]
2025-06-03 16:07:00,359 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 16:07:00,360 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 16:07:00,384 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 16:07:00,384 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 16:07:08,269 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="I'll be happy to share any Wikipedia search I do with you. Please let me know what you would like me to search for." sources=[]
2025-06-03 16:07:08,269 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="I'll be happy to share any Wikipedia search I do with you. Please let me know what you would like me to search for." sources=[]
2025-06-03 16:07:08,270 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 16:07:08,297 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 16:07:08,297 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="I'll be happy to share any Wikipedia search I do with you. Please let me know what you would like me to search for." sources=[]
2025-06-03 16:07:39,736 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 16:07:39,736 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 16:07:39,758 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 16:07:39,758 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 16:07:43,458 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="I don't know your name. I'm a text-based assistant and don't have the ability to retain personal information about users." sources=[]
2025-06-03 16:07:43,458 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="I don't know your name. I'm a text-based assistant and don't have the ability to retain personal information about users." sources=[]
2025-06-03 16:07:43,458 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 16:07:43,490 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 16:07:43,490 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="I don't know your name. I'm a text-based assistant and don't have the ability to retain personal information about users." sources=[]
2025-06-03 16:08:11,435 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 16:08:11,435 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 16:08:11,457 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 16:08:11,457 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 16:08:14,063 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Hello Devanshu Singh, I remember you mentioned your name earlier. How can I assist you today?' sources=[]
2025-06-03 16:08:14,063 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Hello Devanshu Singh, I remember you mentioned your name earlier. How can I assist you today?' sources=[]
2025-06-03 16:08:14,064 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 16:08:14,085 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 16:08:14,086 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Hello Devanshu Singh, I remember you mentioned your name earlier. How can I assist you today?' sources=[]
2025-06-03 16:08:30,869 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 16:08:30,869 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 16:08:30,889 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 16:08:30,889 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 16:08:55,090 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Your name is Devanshu Singh' sources=[]
2025-06-03 16:08:55,091 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Your name is Devanshu Singh' sources=[]
2025-06-03 16:08:55,091 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 16:08:55,108 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 16:08:55,109 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Your name is Devanshu Singh' sources=[]
2025-06-03 16:10:24,537 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 16:10:24,537 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 16:10:24,561 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 16:10:24,561 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 16:10:48,496 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Yes, you previously asked about AI and I provided information from Wikipedia. The response was: Artificial intelligence (AI) is a field of study that focuses on creating machines that can perform tasks that would typically require human intelligence, such as reasoning, problem-solving, and learning. AI involves a range of techniques, including machine learning, natural language processing, and computer vision, among others.' sources=[]
2025-06-03 16:10:48,496 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Yes, you previously asked about AI and I provided information from Wikipedia. The response was: Artificial intelligence (AI) is a field of study that focuses on creating machines that can perform tasks that would typically require human intelligence, such as reasoning, problem-solving, and learning. AI involves a range of techniques, including machine learning, natural language processing, and computer vision, among others.' sources=[]
2025-06-03 16:10:48,497 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 16:10:48,536 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 16:10:48,536 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Yes, you previously asked about AI and I provided information from Wikipedia. The response was: Artificial intelligence (AI) is a field of study that focuses on creating machines that can perform tasks that would typically require human intelligence, such as reasoning, problem-solving, and learning. AI involves a range of techniques, including machine learning, natural language processing, and computer vision, among others.' sources=[]
2025-06-03 21:21:11,972 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-03 21:21:12,484 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-03 21:21:12,610 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-03 21:21:12,614 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-03 21:21:58,603 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 21:21:58,603 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 21:21:58,700 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 21:21:58,700 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 21:21:59,901 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="I don't know your name. I'm a large language model, I don't have personal information about you." sources=[]
2025-06-03 21:21:59,901 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="I don't know your name. I'm a large language model, I don't have personal information about you." sources=[]
2025-06-03 21:21:59,901 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 21:22:00,004 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 21:22:00,004 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="I don't know your name. I'm a large language model, I don't have personal information about you." sources=[]
2025-06-03 21:40:46,907 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 21:40:46,908 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 21:40:46,941 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 21:40:46,942 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 21:40:47,731 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Hello Devansh, nice to meet you again.' sources=[]
2025-06-03 21:40:47,732 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Hello Devansh, nice to meet you again.' sources=[]
2025-06-03 21:40:47,732 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 21:40:47,760 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 21:40:47,761 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Hello Devansh, nice to meet you again.' sources=[]
2025-06-03 21:41:05,673 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 21:41:05,673 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 21:41:05,697 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 21:41:05,697 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 21:41:06,401 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="I'm a multi-tool assistant, so I'm doing various tasks to assist users with their queries. I can provide information, answer questions, and engage in casual conversations." sources=[]
2025-06-03 21:41:06,402 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="I'm a multi-tool assistant, so I'm doing various tasks to assist users with their queries. I can provide information, answer questions, and engage in casual conversations." sources=[]
2025-06-03 21:41:06,402 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 21:41:06,441 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 21:41:06,442 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="I'm a multi-tool assistant, so I'm doing various tasks to assist users with their queries. I can provide information, answer questions, and engage in casual conversations." sources=[]
2025-06-03 21:41:24,577 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 21:41:24,577 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 21:41:24,600 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 21:41:24,600 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 21:41:25,839 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="Why don't scientists trust atoms? Because they make up everything." sources=[]
2025-06-03 21:41:25,840 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="Why don't scientists trust atoms? Because they make up everything." sources=[]
2025-06-03 21:41:25,840 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 21:41:25,866 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 21:41:25,867 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="Why don't scientists trust atoms? Because they make up everything." sources=[]
2025-06-03 21:42:23,174 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 21:42:23,175 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 21:42:23,203 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 21:42:23,203 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 21:42:23,955 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='news' tool_query='Pakistan recent attack' response=None sources=[]
2025-06-03 21:42:23,955 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='news' tool_query='Pakistan recent attack' response=None sources=[]
2025-06-03 21:42:23,955 - INFO - Agentmain.py:400 - Decided next tool: news
2025-06-03 21:42:23,959 - INFO - Agentmain.py:495 - Entered News Summary Node
2025-06-03 21:42:27,926 - INFO - Agentmain.py:533 - Structured News summary: summary='On April 22, 2025, tensions escalated after militants attacked Indian tourists in Kashmir, killing twenty-five Indian nationals and one Nepalese national. The incident marked the deadliest terrorist attack in Indian territory since the 2008 Mumbai attacks. India blamed Pakistan for harboring the group responsible for the attack and arrested two Pakistani nationals as suspects. Pakistan\xa0[denied](https://www.nytimes.com/2025/04/24/world/asia/pakistan-india-kashmir-attack.html) any involvement, [...] In February 2019, an\xa0attack on a convoy of Indian paramilitary forces in Pulwama, Indian-administered Kashmir, killed at least forty soldiers. The attack, claimed by the Pakistani militant group JeM, was the\xa0[deadliest in Kashmir](https://www.nytimes.com/2019/02/14/world/asia/pulwama-attack-kashmir.html) in three decades. India retaliated with an\xa0[air strike](https://www.armscontrol.org/act/2019-05/features/pulwama-crisis-flirting-war-nuclear-environment) targeting terrorist training camps [...] A deadly militant attack in Pahalgam, Indian-administered Kashmir, has triggered a [sharp escalation](https://www.nytimes.com/2025/04/24/world/asia/pakistan-india-kashmir-attack.html) between India and Pakistan, with both sides exchanging gunfire across the Line of Control and downgrading diplomatic ties. On May 6, India announced the launch of "Operation Sindoor," a military strike [targeting nine\nOn May 7, 2025, India launched [missile strikes](https://www.npr.org/2025/05/06/nx-s1-5388952/india-attacks-pakistan#:~:text=India%20launched%20strikes%20into%20several,were%20targeted%2C%22%20it%20said.) in Pakistan and Pakistan-administered Jammu and Kashmir. India stated that the strikes targeted terrorist infrastructure, while Pakistan [rejected](https://www.reuters.com/world/asia-pacific/multiple-loud-explosions-heard-pakistani-kashmir-reuters-witness-2025-05-06/) India’s claims. The [...] **A1:** The terrorist attack took place on April 22 in Pahalgam, a town located in India-administered Kashmir, and killed 25 Indian citizens. The attack occurred along the LoC, which is a de facto border established in 1972 between India and Pakistan demarcating their control over Kashmir. India strongly condemned the terrorist attack, with Indian Prime Minister Narendra Modi [stating](https://pib.gov.in/PressReleasePage.aspx?PRID=2123552) that those behind the attack will be brought to [...] strikes took place after two weeks of flare-ups between India and Pakistan following a [terrorist attack](https://www.bbc.com/news/articles/cy9vyzzyjzlo) in Pahalgam, a town in India-administered Kashmir. Both countries adopted diplomatic and military measures in response to the situation, drawing international attention. India and Pakistan agreed to a ceasefire on May 10, after three days of military operations and as the countries stood on the precipice of war.\nBut Pakistan, which has denied any involvement in that attack, described the strikes as "unprovoked", with Prime Minister Shehbaz Sharif saying the "heinous act of aggression will not go unpunished".\n\nSharif on Wednesday said the Pahalgam attack "wasn\'t related" to Pakistan, and that his country was "accused for the wrong" reasons. [...] In the initial aftermath of the attacks, Pakistan said three different areas were hit: Muzaffarabad and Kotli in Pakistan-administered Kashmir, and Bahawalpur in the Pakistani province of Punjab. Pakistan\'s military spokesperson, Lt Gen Ahmed Sharif, later said six locations had been hit.\n\nPakistan\'s Defence Minister Khawaja Asif told GeoTV in the early hours of Wednesday that the strikes hit civilian areas, adding that India\'s claim of "targeting terrorist camps" was false. [...] But Indian police alleged that two of the attackers were Pakistani nationals, with Delhi accusing Pakistan of supporting militants - a charge Islamabad denies. It says it has nothing to do with the 22 April attacks.\n\nOn 7 May, Indian Foreign Secretary Vikram Misri said Pakistan-based Lashkar-e-Taiba militant group carried out the attack.\n![Damaged houses after a Pakistani artillery shelling, at Salamabad village on May 8, 2025 in Uri, India.](https://ichef.bbci.co.uk/ace/standard/640/cpsprodpb/vivo/live/images/2025/5/8/9b5fcd28-3dae-4a89-a671-81f24e2975ea.jpg.webp)\n\nHouses damaged by Pakistani artillery shelling in Uri, Indian-administered Kashmir\n\nThe ongoing India-Pakistan\ncrisis has taken a dangerous turn. Both nations have for the first time carried\nout mass drone attacks, including on military installations. [...] ![](https://ichef.bbci.co.uk/ace/standard/128/cpsprodpb//vivo/live/images/2023/7/24/7ef1ca50-8a3e-4832-b2b4-0b1649ee1923.jpg.webp)\n\nPakistan\'s defence minister has denied the country is responsible for any attack in Indian-administered Kashmir.\n\nKhawaja Asif told the BBC: "We deny it, we have not mounted anything so far."\n\nAccording to the minister when Pakistan does strike, everyone will know it. "We will not strike and then deny". [...] [Pakistan has denied launching any attack in Indian-administered Kashmir.](https://www.bbc.co.uk/news/live/cwyneele13qt?post=asset%3A31767b56-0158-43b2-bdf3-5bdd7be6cb99#post)\n\n### Pakistan\'s defence minister denies attack on Indian-administered Kashmirpublished at 18:12 British Summer Time 8 May 18:12 BST 8 May\n\n![](https://ichef.bbci.co.uk/ace/standard/128/cpsprodpb//vivo/live/images/2023/7/24/7ef1ca50-8a3e-4832-b2b4-0b1649ee1923.jpg.webp)**Azadeh Moshiri**  \nPakistan correspondent\nNew Delhi blames Islamabad for the killing of 26 people — most of them tourists — in Indian-administered Kashmir’s resort town of [Pahalgam](/news/2025/5/2/pahalgam-attack-a-simple-guide-to-the-kashmir-conflict) on April 22, which led to days of exchange of missiles and drone explosives between the two nuclear powers, before they agreed to a ceasefire.\n\nPakistan has rejected India’s allegations. [...] Pakistan says it provides only diplomatic and moral support to the Kashmiri separatist movement. And though it accepts that the 2008 Mumbai attacks, in which more than 160 people were killed, might have been planned from Pakistan, it insists that the country’s government and [military](/news/2025/5/20/how-conflict-with-india-helped-boost-the-pakistan-militarys-domestic-image) had no role. [...] # ‘Attack on country’s soul’: Indian MPs target Pakistan on global trips\n\n*India blames Pakistan for the April attack that killed 26 people and brought the neighbours to the brink of war. Pakistan denies the allegation.*\n\n![A team of Indian parliamentarians in Doha](/wp-content/uploads/2025/05/image1-1748324400.jpeg?resize=770%2C513&quality=80)' sources=['https://www.cfr.org/global-conflict-tracker/conflict/conflict-between-india-and-pakistan', 'https://www.csis.org/analysis/what-led-recent-crisis-between-india-and-pakistan', 'https://www.bbc.com/news/articles/cj6868pdpw4o', 'https://www.bbc.com/news/live/cwyneele13qt', 'https://www.aljazeera.com/news/2025/5/27/attack-on-countrys-soul-indian-mps-target-pakistan-on-global-trips']
2025-06-03 21:42:27,930 - INFO - Agentmain.py:537 - News summary retrieved: 6610 chars
2025-06-03 21:42:27,930 - INFO - Agentmain.py:561 - Exiting News Summary Node
2025-06-03 21:42:27,948 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 21:42:27,948 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 21:42:27,969 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 21:42:27,970 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 21:42:27,972 - INFO - Agentmain.py:262 - Message to LLM: 
You are an AI assistant that helps summarize news information.

The following content has been retrieved in response to a user's query. Your task is to analyze this content and generate a clear, concise, and factual answer in 2-3 sentences that directly addresses the user's query.

If the content is not relevant or no summary can be made, respond with: "No recent news could be found."

IMPORTANT:
- Your output must be a single JSON object with keys: "tool", "tool_query", and "response".
- Set "tool" to "end".
- Set "tool_query" to null.
- Write your answer in the "response" field.
- Use an empty list `[]` for "sources" if none
- **Do NOT include any comments, explanations, or extra text. Only output the JSON object.**

Previous assistant response: tool='news' tool_query='Pakistan recent attack' response=None sources=[]

News content: On April 22, 2025, tensions escalated after militants attacked Indian tourists in Kashmir, killing twenty-five Indian nationals and one Nepalese national. The incident marked the deadliest terrorist attack in Indian territory since the 2008 Mumbai attacks. India blamed Pakistan for harboring the group responsible for the attack and arrested two Pakistani nationals as suspects. Pakistan [denied](https://www.nytimes.com/2025/04/24/world/asia/pakistan-india-kashmir-attack.html) any involvement, [...] In February 2019, an attack on a convoy of Indian paramilitary forces in Pulwama, Indian-administered Kashmir, killed at least forty soldiers. The attack, claimed by the Pakistani militant group JeM, was the [deadliest in Kashmir](https://www.nytimes.com/2019/02/14/world/asia/pulwama-attack-kashmir.html) in three decades. India retaliated with an [air strike](https://www.armscontrol.org/act/2019-05/features/pulwama-crisis-flirting-war-nuclear-environment) targeting terrorist training camps [...] A deadly militant attack in Pahalgam, Indian-administered Kashmir, has triggered a [sharp escalation](https://www.nytimes.com/2025/04/24/world/asia/pakistan-india-kashmir-attack.html) between India and Pakistan, with both sides exchanging gunfire across the Line of Control and downgrading diplomatic ties. On May 6, India announced the launch of "Operation Sindoor," a military strike [targeting nine
On May 7, 2025, India launched [missile strikes](https://www.npr.org/2025/05/06/nx-s1-5388952/india-attacks-pakistan#:~:text=India%20launched%20strikes%20into%20several,were%20targeted%2C%22%20it%20said.) in Pakistan and Pakistan-administered Jammu and Kashmir. India stated that the strikes targeted terrorist infrastructure, while Pakistan [rejected](https://www.reuters.com/world/asia-pacific/multiple-loud-explosions-heard-pakistani-kashmir-reuters-witness-2025-05-06/) India’s claims. The [...] **A1:** The terrorist attack took place on April 22 in Pahalgam, a town located in India-administered Kashmir, and killed 25 Indian citizens. The attack occurred along the LoC, which is a de facto border established in 1972 between India and Pakistan demarcating their control over Kashmir. India strongly condemned the terrorist attack, with Indian Prime Minister Narendra Modi [stating](https://pib.gov.in/PressReleasePage.aspx?PRID=2123552) that those behind the attack will be brought to [...] strikes took place after two weeks of flare-ups between India and Pakistan following a [terrorist attack](https://www.bbc.com/news/articles/cy9vyzzyjzlo) in Pahalgam, a town in India-administered Kashmir. Both countries adopted diplomatic and military measures in response to the situation, drawing international attention. India and Pakistan agreed to a ceasefire on May 10, after three days of military operations and as the countries stood on the precipice of war.
But Pakistan, which has denied any involvement in that attack, described the strikes as "unprovoked", with Prime Minister Shehbaz Sharif saying the "heinous act of aggression will not go unpunished".

Sharif on Wednesday said the Pahalgam attack "wasn't related" to Pakistan, and that his country was "accused for the wrong" reasons. [...] In the initial aftermath of the attacks, Pakistan said three different areas were hit: Muzaffarabad and Kotli in Pakistan-administered Kashmir, and Bahawalpur in the Pakistani province of Punjab. Pakistan's military spokesperson, Lt Gen Ahmed Sharif, later said six locations had been hit.

Pakistan's Defence Minister Khawaja Asif told GeoTV in the early hours of Wednesday that the strikes hit civilian areas, adding that India's claim of "targeting terrorist camps" was false. [...] But Indian police alleged that two of the attackers were Pakistani nationals, with Delhi accusing Pakistan of supporting militants - a charge Islamabad denies. It says it has nothing to do with the 22 April attacks.

On 7 May, Indian Foreign Secretary Vikram Misri said Pakistan-based Lashkar-e-Taiba militant group carried out the attack.
![Damaged houses after a Pakistani artillery shelling, at Salamabad village on May 8, 2025 in Uri, India.](https://ichef.bbci.co.uk/ace/standard/640/cpsprodpb/vivo/live/images/2025/5/8/9b5fcd28-3dae-4a89-a671-81f24e2975ea.jpg.webp)

Houses damaged by Pakistani artillery shelling in Uri, Indian-administered Kashmir

The ongoing India-Pakistan
crisis has taken a dangerous turn. Both nations have for the first time carried
out mass drone attacks, including on military installations. [...] ![](https://ichef.bbci.co.uk/ace/standard/128/cpsprodpb//vivo/live/images/2023/7/24/7ef1ca50-8a3e-4832-b2b4-0b1649ee1923.jpg.webp)

Pakistan's defence minister has denied the country is responsible for any attack in Indian-administered Kashmir.

Khawaja Asif told the BBC: "We deny it, we have not mounted anything so far."

According to the minister when Pakistan does strike, everyone will know it. "We will not strike and then deny". [...] [Pakistan has denied launching any attack in Indian-administered Kashmir.](https://www.bbc.co.uk/news/live/cwyneele13qt?post=asset%3A31767b56-0158-43b2-bdf3-5bdd7be6cb99#post)

### Pakistan's defence minister denies attack on Indian-administered Kashmirpublished at 18:12 British Summer Time 8 May 18:12 BST 8 May

![](https://ichef.bbci.co.uk/ace/standard/128/cpsprodpb//vivo/live/images/2023/7/24/7ef1ca50-8a3e-4832-b2b4-0b1649ee1923.jpg.webp)**Azadeh Moshiri**  
Pakistan correspondent
New Delhi blames Islamabad for the killing of 26 people — most of them tourists — in Indian-administered Kashmir’s resort town of [Pahalgam](/news/2025/5/2/pahalgam-attack-a-simple-guide-to-the-kashmir-conflict) on April 22, which led to days of exchange of missiles and drone explosives between the two nuclear powers, before they agreed to a ceasefire.

Pakistan has rejected India’s allegations. [...] Pakistan says it provides only diplomatic and moral support to the Kashmiri separatist movement. And though it accepts that the 2008 Mumbai attacks, in which more than 160 people were killed, might have been planned from Pakistan, it insists that the country’s government and [military](/news/2025/5/20/how-conflict-with-india-helped-boost-the-pakistan-militarys-domestic-image) had no role. [...] # ‘Attack on country’s soul’: Indian MPs target Pakistan on global trips

*India blames Pakistan for the April attack that killed 26 people and brought the neighbours to the brink of war. Pakistan denies the allegation.*

![A team of Indian parliamentarians in Doha](/wp-content/uploads/2025/05/image1-1748324400.jpeg?resize=770%2C513&quality=80)

2025-06-03 21:42:29,209 - INFO - Agentmain.py:265 - Structured response from LLM: tool='end' tool_query=None response='A terrorist attack occurred on April 22, 2025, in Pahalgam, India-administered Kashmir, killing 25 Indian nationals and one Nepalese national. India blamed Pakistan for harboring the group responsible for the attack, while Pakistan denied any involvement. The incident led to a sharp escalation between India and Pakistan, with both sides exchanging gunfire and downgrading diplomatic ties.' sources=[]
2025-06-03 21:42:29,244 - INFO - Agentmain.py:397 - Handled tool response for end
2025-06-03 21:42:29,321 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 21:42:29,321 - INFO - Agentmain.py:648 - Using LLM-provided final response: A terrorist attack occurred on April 22, 2025, in Pahalgam, India-administered Kashmir, killing 25 Indian nationals and one Nepalese national. India blamed Pakistan for harboring the group responsible for the attack, while Pakistan denied any involvement. The incident led to a sharp escalation between India and Pakistan, with both sides exchanging gunfire and downgrading diplomatic ties.
2025-06-03 21:43:14,204 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 21:43:14,205 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 21:43:14,225 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 21:43:14,225 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 21:43:14,868 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="I don't know your name. This conversation just started, and I haven't received any information about you." sources=[]
2025-06-03 21:43:14,869 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="I don't know your name. This conversation just started, and I haven't received any information about you." sources=[]
2025-06-03 21:43:14,869 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 21:43:14,890 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 21:43:14,891 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="I don't know your name. This conversation just started, and I haven't received any information about you." sources=[]
2025-06-03 21:45:00,609 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 21:45:00,609 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 21:45:00,632 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 21:45:00,632 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 21:45:01,387 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="I'm not sure what you're referring to. Could you please provide more context?" sources=[]
2025-06-03 21:45:01,387 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="I'm not sure what you're referring to. Could you please provide more context?" sources=[]
2025-06-03 21:45:01,387 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 21:45:01,407 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 21:45:01,407 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="I'm not sure what you're referring to. Could you please provide more context?" sources=[]
2025-06-03 21:45:18,659 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 21:45:18,660 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 21:45:18,681 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 21:45:18,681 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 21:45:19,156 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="Your first question was 'hello'." sources=[]
2025-06-03 21:45:19,156 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="Your first question was 'hello'." sources=[]
2025-06-03 21:45:19,157 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 21:45:19,172 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 21:45:19,173 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="Your first question was 'hello'." sources=[]
2025-06-03 22:09:33,534 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-03 22:09:33,685 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-03 22:09:33,719 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-03 22:09:33,720 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-03 22:10:02,069 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 22:10:02,070 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 22:10:02,102 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 22:10:02,102 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 22:10:03,075 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Hello, how can I assist you today?' sources=[]
2025-06-03 22:10:03,075 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Hello, how can I assist you today?' sources=[]
2025-06-03 22:10:03,077 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 22:10:03,104 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 22:10:03,105 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Hello, how can I assist you today?' sources=[]
2025-06-03 22:10:16,872 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 22:10:16,872 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 22:10:16,893 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 22:10:16,893 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 22:10:17,638 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Nice to meet you again, Devanshu Singh!' sources=[]
2025-06-03 22:10:17,639 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Nice to meet you again, Devanshu Singh!' sources=[]
2025-06-03 22:10:17,639 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 22:10:17,662 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 22:10:17,663 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Nice to meet you again, Devanshu Singh!' sources=[]
2025-06-03 22:10:30,904 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 22:10:30,904 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 22:10:30,924 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 22:10:30,925 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 22:10:38,092 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="I'm a multi-tool assistant, and I'm currently assisting you with your queries." sources=[]
2025-06-03 22:10:38,092 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="I'm a multi-tool assistant, and I'm currently assisting you with your queries." sources=[]
2025-06-03 22:10:38,092 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 22:10:38,119 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 22:10:38,119 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="I'm a multi-tool assistant, and I'm currently assisting you with your queries." sources=[]
2025-06-03 22:11:02,170 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 22:11:02,171 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 22:11:02,198 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 22:11:02,198 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 22:11:02,832 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="Here's one: Why don't skeletons fight each other? They don't have the guts. I can share more if you'd like." sources=[]
2025-06-03 22:11:02,832 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="Here's one: Why don't skeletons fight each other? They don't have the guts. I can share more if you'd like." sources=[]
2025-06-03 22:11:02,832 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 22:11:02,861 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 22:11:02,861 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="Here's one: Why don't skeletons fight each other? They don't have the guts. I can share more if you'd like." sources=[]
2025-06-03 22:11:24,105 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 22:11:24,105 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 22:11:24,131 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 22:11:24,132 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 22:11:24,848 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="I'm a multi-tool assistant designed to answer user queries by deciding which tool to use and generating appropriate responses. My work involves using tools like Wikipedia, news, web search, and direct response to provide information and answers to users." sources=[]
2025-06-03 22:11:24,848 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="I'm a multi-tool assistant designed to answer user queries by deciding which tool to use and generating appropriate responses. My work involves using tools like Wikipedia, news, web search, and direct response to provide information and answers to users." sources=[]
2025-06-03 22:11:24,849 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 22:11:24,877 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 22:11:24,877 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="I'm a multi-tool assistant designed to answer user queries by deciding which tool to use and generating appropriate responses. My work involves using tools like Wikipedia, news, web search, and direct response to provide information and answers to users." sources=[]
2025-06-03 22:12:01,321 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 22:12:01,322 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 22:12:01,349 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 22:12:01,350 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 22:12:02,072 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="I'm a multi-tool assistant designed to provide information and answer questions on a wide range of topics. I can provide factual information, news updates, and even engage in casual conversations. My abilities include answering questions, generating text, and even translating languages. I'm here to help and provide assistance, so feel free to ask me anything." sources=[]
2025-06-03 22:12:02,073 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="I'm a multi-tool assistant designed to provide information and answer questions on a wide range of topics. I can provide factual information, news updates, and even engage in casual conversations. My abilities include answering questions, generating text, and even translating languages. I'm here to help and provide assistance, so feel free to ask me anything." sources=[]
2025-06-03 22:12:02,073 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 22:12:02,105 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 22:12:02,106 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="I'm a multi-tool assistant designed to provide information and answer questions on a wide range of topics. I can provide factual information, news updates, and even engage in casual conversations. My abilities include answering questions, generating text, and even translating languages. I'm here to help and provide assistance, so feel free to ask me anything." sources=[]
2025-06-03 22:12:26,278 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 22:12:26,278 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 22:12:26,304 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 22:12:26,304 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 22:12:26,983 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Your name is Devanshu Singh' sources=[]
2025-06-03 22:12:26,983 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Your name is Devanshu Singh' sources=[]
2025-06-03 22:12:26,983 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 22:12:27,002 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 22:12:27,002 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Your name is Devanshu Singh' sources=[]
2025-06-03 22:12:54,723 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 22:12:54,723 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 22:12:54,744 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 22:12:54,744 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 22:12:55,311 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="I'm happy to chat with you, but I don't have any information about your most awesome query. Our conversation just started. What would you like to talk about?" sources=[]
2025-06-03 22:12:55,311 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="I'm happy to chat with you, but I don't have any information about your most awesome query. Our conversation just started. What would you like to talk about?" sources=[]
2025-06-03 22:12:55,312 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 22:12:55,338 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 22:12:55,339 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="I'm happy to chat with you, but I don't have any information about your most awesome query. Our conversation just started. What would you like to talk about?" sources=[]
2025-06-03 22:13:20,270 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 22:13:20,271 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 22:13:20,291 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 22:13:20,291 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 22:13:20,937 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="I don't actually know your name. I'm a text-based AI assistant and do not have the ability to access or store personal information about users. Each time you interact with me, it's a new conversation and I don't retain any information from previous conversations." sources=[]
2025-06-03 22:13:20,938 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="I don't actually know your name. I'm a text-based AI assistant and do not have the ability to access or store personal information about users. Each time you interact with me, it's a new conversation and I don't retain any information from previous conversations." sources=[]
2025-06-03 22:13:20,938 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 22:13:20,963 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 22:13:20,963 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="I don't actually know your name. I'm a text-based AI assistant and do not have the ability to access or store personal information about users. Each time you interact with me, it's a new conversation and I don't retain any information from previous conversations." sources=[]
2025-06-03 22:13:34,772 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-03 22:13:34,772 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-03 22:13:34,794 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-03 22:13:34,795 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-03 22:13:35,741 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="I don't have information about your name. You could try telling me your name so I can remember it for next time." sources=[]
2025-06-03 22:13:35,742 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="I don't have information about your name. You could try telling me your name so I can remember it for next time." sources=[]
2025-06-03 22:13:35,742 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-03 22:13:35,766 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-03 22:13:35,766 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="I don't have information about your name. You could try telling me your name so I can remember it for next time." sources=[]
2025-06-04 12:57:36,128 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-04 12:57:36,467 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-04 12:57:36,538 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-04 12:57:36,542 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-04 12:58:43,790 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-04 12:58:43,790 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-04 12:58:43,817 - INFO - Agentmain.py:144 - Found 1 similar memories and 0 summaries.
2025-06-04 12:58:43,818 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-04 12:58:45,257 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="Hello! It's nice to meet you. Is there something I can help you with or would you like to chat?" sources=[]
2025-06-04 12:58:45,258 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="Hello! It's nice to meet you. Is there something I can help you with or would you like to chat?" sources=[]
2025-06-04 12:58:45,259 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-04 12:58:45,303 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-04 12:58:45,303 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="Hello! It's nice to meet you. Is there something I can help you with or would you like to chat?" sources=[]
2025-06-04 12:59:03,314 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-04 12:59:03,314 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-04 12:59:03,346 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-04 12:59:03,347 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-04 12:59:04,470 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="Hello! It's nice to meet you. Is there something I can help you with or would you like to chat?" sources=[]
2025-06-04 12:59:04,471 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="Hello! It's nice to meet you. Is there something I can help you with or would you like to chat?" sources=[]
2025-06-04 12:59:04,472 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-04 12:59:04,502 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-04 12:59:04,502 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="Hello! It's nice to meet you. Is there something I can help you with or would you like to chat?" sources=[]
2025-06-04 12:59:28,063 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-04 12:59:28,063 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-04 12:59:28,094 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-04 12:59:28,094 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-04 12:59:29,735 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="I'm a smart, multi-tool assistant designed to answer user queries by deciding which tool to use and generating appropriate responses. My work involves helping users like you with various tasks and providing information on a wide range of topics." sources=[]
2025-06-04 12:59:29,736 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="I'm a smart, multi-tool assistant designed to answer user queries by deciding which tool to use and generating appropriate responses. My work involves helping users like you with various tasks and providing information on a wide range of topics." sources=[]
2025-06-04 12:59:29,737 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-04 12:59:29,781 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-04 12:59:29,781 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="I'm a smart, multi-tool assistant designed to answer user queries by deciding which tool to use and generating appropriate responses. My work involves helping users like you with various tasks and providing information on a wide range of topics." sources=[]
2025-06-04 13:00:19,273 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-04 13:00:19,273 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-04 13:00:19,306 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-04 13:00:19,307 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-04 13:00:21,960 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="Nice to meet you too, Devanshu Singh! I'm an assistant, so I don't have a personal name, but I'm here to help answer your questions and provide information on a wide range of topics." sources=[]
2025-06-04 13:00:21,961 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="Nice to meet you too, Devanshu Singh! I'm an assistant, so I don't have a personal name, but I'm here to help answer your questions and provide information on a wide range of topics." sources=[]
2025-06-04 13:00:21,961 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-04 13:00:21,992 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-04 13:00:21,992 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="Nice to meet you too, Devanshu Singh! I'm an assistant, so I don't have a personal name, but I'm here to help answer your questions and provide information on a wide range of topics." sources=[]
2025-06-04 13:01:02,888 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-04 13:01:02,889 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-04 13:01:02,919 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-04 13:01:02,920 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-04 13:01:04,304 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='wikipedia' tool_query='buggati' response=None sources=[]
2025-06-04 13:01:04,305 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='wikipedia' tool_query='buggati' response=None sources=[]
2025-06-04 13:01:04,306 - INFO - Agentmain.py:400 - Decided next tool: wikipedia
2025-06-04 13:01:04,309 - INFO - Agentmain.py:449 - Entered Wikipedia Search Node
2025-06-04 13:01:11,369 - INFO - Agentmain.py:467 - Structured Wikipedia summary: summary='Page: Bugatti\nSummary: Automobiles Ettore Bugatti was a German then French manufacturer of high-performance automobiles. The company was founded in 1909 in the then-German city of Molsheim, Alsace, by the Italian-born industrial designer Ettore Bugatti. The cars were known for their design beauty and numerous race victories. Famous Bugatti automobiles include the Type 35 Grand Prix cars, the Type 41 "Royale", the Type 57 "Atlantic" and the Type 55 sports car.\nThe death of Ettore Bugatti in 1947 proved to be a severe blow to the marque, and the death of his son Jean in 1939 meant that there was no successor to lead the factory. With no more than about 8,000 cars made, the company struggled financially, and it released one last model in the 1950s before eventually being purchased for its airplane parts business in 1963.\nIn 1987, an Italian entrepreneur bought the brand name and revived it as Bugatti Automobili S.p.A.\nA movie about the founding of the French car manufacturer Bugatti is being produced by Andrea Iervolino with the film slated for release in 2025.\n\n' page_title=None url=None
2025-06-04 13:01:11,370 - INFO - Agentmain.py:470 - Wikipedia summary retrieved: Page: Bugatti
Summary: Automobiles Ettore Bugatti was a German then French manufacturer of high-performance automobiles. The company was founded in 1909 in the then-German city of Molsheim, Alsace, by the Italian-born industrial designer Ettore Bugatti. The cars were known for their design beauty and numerous race victories. Famous Bugatti automobiles include the Type 35 Grand Prix cars, the Type 41 "Royale", the Type 57 "Atlantic" and the Type 55 sports car.
The death of Ettore Bugatti in 1947 proved to be a severe blow to the marque, and the death of his son Jean in 1939 meant that there was no successor to lead the factory. With no more than about 8,000 cars made, the company struggled financially, and it released one last model in the 1950s before eventually being purchased for its airplane parts business in 1963.
In 1987, an Italian entrepreneur bought the brand name and revived it as Bugatti Automobili S.p.A.
A movie about the founding of the French car manufacturer Bugatti is being produced by Andrea Iervolino with the film slated for release in 2025.


2025-06-04 13:01:11,391 - INFO - memory_manager.py:22 - Short-term memory limit exceeded. Summarizing memory.
2025-06-04 13:01:13,528 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-04 13:01:13,591 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-04 13:01:13,591 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-04 13:01:13,622 - INFO - Agentmain.py:144 - Found 3 similar memories and 1 summaries.
2025-06-04 13:01:13,623 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-04 13:01:13,625 - INFO - Agentmain.py:262 - Message to LLM: 
You are an AI assistant that helps summarize factual information obtained from Wikipedia.

The following content has been retrieved from Wikipedia in response to a user's query. Your task is to analyze this content and generate a clear, concise, and factual answer in 2-3 sentences that directly addresses the user's query.

If irrelevant or insufficient, respond: "No relevant information could be found on Wikipedia."


IMPORTANT:
- Respond with a JSON object: "tool", "tool_query", "response", "sources".
- Set "tool" to "end"
- Set "tool_query" to null
- Place your answer in "response"
- Use an empty list `[]` for "sources" if none

Do not add comments or extra text.                          

Previous assistant response: tool='wikipedia' tool_query='buggati' response=None sources=[]

Wikipedia content: Page: Bugatti
Summary: Automobiles Ettore Bugatti was a German then French manufacturer of high-performance automobiles. The company was founded in 1909 in the then-German city of Molsheim, Alsace, by the Italian-born industrial designer Ettore Bugatti. The cars were known for their design beauty and numerous race victories. Famous Bugatti automobiles include the Type 35 Grand Prix cars, the Type 41 "Royale", the Type 57 "Atlantic" and the Type 55 sports car.
The death of Ettore Bugatti in 1947 proved to be a severe blow to the marque, and the death of his son Jean in 1939 meant that there was no successor to lead the factory. With no more than about 8,000 cars made, the company struggled financially, and it released one last model in the 1950s before eventually being purchased for its airplane parts business in 1963.
In 1987, an Italian entrepreneur bought the brand name and revived it as Bugatti Automobili S.p.A.
A movie about the founding of the French car manufacturer Bugatti is being produced by Andrea Iervolino with the film slated for release in 2025.



2025-06-04 13:01:24,486 - INFO - Agentmain.py:265 - Structured response from LLM: tool='end' tool_query=None response="Bugatti is a German then French manufacturer of high-performance automobiles founded in 1909 by Ettore Bugatti in Molsheim, Alsace. The company is known for its design beauty and numerous race victories, with famous models including the Type 35 Grand Prix cars and the Type 57 'Atlantic'. The brand was revived in 1987 as Bugatti Automobili S.p.A. after facing financial struggles and changing ownership." sources=[]
2025-06-04 13:01:24,524 - INFO - Agentmain.py:397 - Handled tool response for end
2025-06-04 13:01:24,588 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-04 13:01:24,588 - INFO - Agentmain.py:648 - Using LLM-provided final response: Bugatti is a German then French manufacturer of high-performance automobiles founded in 1909 by Ettore Bugatti in Molsheim, Alsace. The company is known for its design beauty and numerous race victories, with famous models including the Type 35 Grand Prix cars and the Type 57 'Atlantic'. The brand was revived in 1987 as Bugatti Automobili S.p.A. after facing financial struggles and changing ownership.
2025-06-04 13:02:15,857 - INFO - memory_manager.py:22 - Short-term memory limit exceeded. Summarizing memory.
2025-06-04 13:02:17,716 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-04 13:02:17,774 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-04 13:02:17,774 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-04 13:02:17,798 - INFO - Agentmain.py:144 - Found 3 similar memories and 2 summaries.
2025-06-04 13:02:17,799 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-04 13:02:18,664 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Your name is Devanshu Singh.' sources=[]
2025-06-04 13:02:18,664 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Your name is Devanshu Singh.' sources=[]
2025-06-04 13:02:18,664 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-04 13:02:18,695 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-04 13:02:18,696 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Your name is Devanshu Singh.' sources=[]
2025-06-04 13:02:43,428 - INFO - memory_manager.py:22 - Short-term memory limit exceeded. Summarizing memory.
2025-06-04 13:03:03,216 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-04 13:03:03,272 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-04 13:03:03,273 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-04 13:03:03,308 - INFO - Agentmain.py:144 - Found 3 similar memories and 2 summaries.
2025-06-04 13:03:03,309 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-04 13:03:26,609 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='I recently searched for information on Bugatti from Wikipedia.' sources=[]
2025-06-04 13:03:26,609 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='I recently searched for information on Bugatti from Wikipedia.' sources=[]
2025-06-04 13:03:26,609 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-04 13:03:26,667 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-04 13:03:26,667 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='I recently searched for information on Bugatti from Wikipedia.' sources=[]
2025-06-04 22:24:11,318 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-04 22:24:11,485 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-04 22:24:11,511 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-04 22:24:11,515 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-04 22:25:12,558 - INFO - memory_manager.py:22 - Short-term memory limit exceeded. Summarizing memory.
2025-06-04 22:25:13,849 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-04 22:25:13,923 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-04 22:25:13,923 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-04 22:25:13,954 - INFO - Agentmain.py:144 - Found 3 similar memories and 2 summaries.
2025-06-04 22:25:13,954 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-04 22:25:14,794 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="Hello again, Devanshu Singh! It's nice to chat with you again. Is there something I can help you with or would you like to continue our previous conversation?" sources=[]
2025-06-04 22:25:14,795 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="Hello again, Devanshu Singh! It's nice to chat with you again. Is there something I can help you with or would you like to continue our previous conversation?" sources=[]
2025-06-04 22:25:14,795 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-04 22:25:14,835 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-04 22:25:14,835 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="Hello again, Devanshu Singh! It's nice to chat with you again. Is there something I can help you with or would you like to continue our previous conversation?" sources=[]
2025-06-04 22:34:02,505 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-04 22:34:02,719 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-04 22:34:02,749 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-04 22:34:02,753 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-04 22:34:22,006 - ERROR - embedding_manager.py:22 - Failed to initialize embedding model: (ProtocolError('Connection aborted.', RemoteDisconnected('Remote end closed connection without response')), '(Request ID: f762d84a-4334-4c87-b3da-50e3524fd831)')
2025-06-04 22:34:22,131 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-04 22:34:22,140 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-04 22:34:22,143 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-04 22:34:48,415 - INFO - memory_manager.py:22 - Short-term memory limit exceeded. Summarizing memory.
2025-06-04 22:35:05,540 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-04 22:35:05,540 - ERROR - Agentmain.py:432 - Error in chat flow execution: Embedding model not initialized
2025-06-04 22:35:05,544 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-04 22:35:06,125 - INFO - Agentmain.py:705 - Generated final response: I'm an AI assistant, and my work involves providing helpful and accurate responses to user queries. I don't have personal experiences or emotions, but I'm designed to assist and provide information on a wide range of topics. Since no additional information was gathered, I'm limited in my ability to provide more specific details about my work. If you have any specific questions or topics you'd like to discuss, I'm here to help. Sources: []
2025-06-04 22:35:44,772 - INFO - memory_manager.py:22 - Short-term memory limit exceeded. Summarizing memory.
2025-06-04 22:35:46,259 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-04 22:35:46,260 - ERROR - Agentmain.py:432 - Error in chat flow execution: Embedding model not initialized
2025-06-04 22:35:46,262 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-04 22:35:47,054 - INFO - Agentmain.py:705 - Generated final response: Hello again, it's nice to interact with you. However, I don't have any additional information to provide at this time. If you have a specific question or topic you'd like to discuss, I'm here to help. Please feel free to ask me anything.
2025-06-04 22:35:59,917 - INFO - memory_manager.py:22 - Short-term memory limit exceeded. Summarizing memory.
2025-06-04 22:36:01,072 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-04 22:36:01,073 - ERROR - Agentmain.py:432 - Error in chat flow execution: Embedding model not initialized
2025-06-04 22:36:01,076 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-04 22:36:01,515 - INFO - Agentmain.py:705 - Generated final response: I'm not able to determine your name as no additional information was gathered. I don't have access to personal data or any specific sources that could provide this information. If you'd like to share your name, I'd be happy to assist you further.
2025-06-04 22:36:39,875 - INFO - memory_manager.py:22 - Short-term memory limit exceeded. Summarizing memory.
2025-06-04 22:36:40,847 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-04 22:36:40,847 - ERROR - Agentmain.py:432 - Error in chat flow execution: Embedding model not initialized
2025-06-04 22:36:40,849 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-04 22:36:41,498 - INFO - Agentmain.py:705 - Generated final response: I'm happy to greet you by your name. However, I don't have any information about your name as it wasn't provided to me. If you'd like, you can share your name with me, and I'll be more than happy to greet you personally in the future. Please note that I'm a large language model, I don't have the ability to recall previous conversations or maintain personal information about users. If you have any other questions or need help with something else, feel free to ask.
2025-06-04 23:12:48,243 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-04 23:12:48,515 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-04 23:12:48,557 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-04 23:12:48,560 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-04 23:13:01,119 - INFO - memory_manager.py:22 - Short-term memory limit exceeded. Summarizing memory.
2025-06-04 23:13:02,628 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-04 23:13:02,708 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-04 23:13:02,709 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-04 23:13:02,738 - INFO - Agentmain.py:144 - Found 3 similar memories and 2 summaries.
2025-06-04 23:13:02,738 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-04 23:13:03,201 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="Hello again, Devanshu Singh! It's nice to chat with you again. Is there something I can help you with or would you like to continue our previous conversation?" sources=[]
2025-06-04 23:13:03,202 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="Hello again, Devanshu Singh! It's nice to chat with you again. Is there something I can help you with or would you like to continue our previous conversation?" sources=[]
2025-06-04 23:13:03,202 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-04 23:13:03,238 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-04 23:13:03,238 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="Hello again, Devanshu Singh! It's nice to chat with you again. Is there something I can help you with or would you like to continue our previous conversation?" sources=[]
2025-06-04 23:13:22,781 - INFO - memory_manager.py:22 - Short-term memory limit exceeded. Summarizing memory.
2025-06-04 23:13:23,770 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-04 23:13:23,843 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-04 23:13:23,844 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-04 23:13:23,876 - INFO - Agentmain.py:144 - Found 3 similar memories and 2 summaries.
2025-06-04 23:13:23,877 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-04 23:13:24,451 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Your name is Devanshu Singh.' sources=[]
2025-06-04 23:13:24,451 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Your name is Devanshu Singh.' sources=[]
2025-06-04 23:13:24,452 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-04 23:13:24,478 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-04 23:13:24,479 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Your name is Devanshu Singh.' sources=[]
2025-06-04 23:16:41,213 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-04 23:16:41,333 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-04 23:16:41,351 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-04 23:16:41,356 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-04 23:16:58,023 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-04 23:16:58,024 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-04 23:16:58,045 - INFO - Agentmain.py:144 - Found 1 similar memories and 0 summaries.
2025-06-04 23:16:58,045 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-04 23:16:58,896 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Hello, how can I assist you today?' sources=[]
2025-06-04 23:16:58,897 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Hello, how can I assist you today?' sources=[]
2025-06-04 23:16:58,898 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-04 23:16:58,934 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-04 23:16:58,934 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Hello, how can I assist you today?' sources=[]
2025-06-04 23:22:17,096 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-04 23:22:17,097 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-04 23:22:17,120 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-04 23:22:17,122 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-04 23:22:17,863 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Hello, how can I assist you today?' sources=[]
2025-06-04 23:22:17,864 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Hello, how can I assist you today?' sources=[]
2025-06-04 23:22:17,864 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-04 23:22:17,914 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-04 23:22:17,914 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Hello, how can I assist you today?' sources=[]
2025-06-04 23:22:51,754 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-04 23:22:51,942 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-04 23:22:51,968 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-04 23:22:51,971 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-04 23:22:54,390 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-04 23:22:54,390 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-04 23:22:54,415 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-04 23:22:54,415 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-04 23:22:54,981 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Hello, how can I assist you today?' sources=[]
2025-06-04 23:22:54,982 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Hello, how can I assist you today?' sources=[]
2025-06-04 23:22:54,982 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-04 23:22:55,017 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-04 23:22:55,017 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Hello, how can I assist you today?' sources=[]
2025-06-04 23:23:25,511 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-04 23:23:25,742 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-04 23:23:25,757 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-04 23:23:25,759 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-04 23:23:34,472 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-04 23:23:34,472 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-04 23:23:34,502 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-04 23:23:34,503 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-04 23:23:35,137 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Hello, how can I assist you today?' sources=[]
2025-06-04 23:23:35,138 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Hello, how can I assist you today?' sources=[]
2025-06-04 23:23:35,138 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-04 23:23:35,177 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-04 23:23:35,177 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Hello, how can I assist you today?' sources=[]
2025-06-04 23:24:10,539 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-04 23:24:10,540 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-04 23:24:10,571 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-04 23:24:10,571 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-04 23:24:11,104 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Hello Devanshu, how can I assist you today?' sources=[]
2025-06-04 23:24:11,105 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Hello Devanshu, how can I assist you today?' sources=[]
2025-06-04 23:24:11,105 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-04 23:24:11,131 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-04 23:24:11,131 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Hello Devanshu, how can I assist you today?' sources=[]
2025-06-04 23:24:56,669 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-04 23:24:56,820 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-04 23:24:56,855 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-04 23:24:56,858 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-04 23:25:08,344 - INFO - memory_manager.py:22 - Short-term memory limit exceeded. Summarizing memory.
2025-06-04 23:25:09,245 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-04 23:25:09,311 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-04 23:25:09,311 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-04 23:25:09,346 - INFO - Agentmain.py:144 - Found 3 similar memories and 1 summaries.
2025-06-04 23:25:09,347 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-04 23:25:09,742 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Your name is Devanshu.' sources=[]
2025-06-04 23:25:09,743 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Your name is Devanshu.' sources=[]
2025-06-04 23:25:09,744 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-04 23:25:09,767 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-04 23:25:09,767 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Your name is Devanshu.' sources=[]
2025-06-04 23:25:56,394 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-04 23:25:56,484 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-04 23:25:56,494 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-04 23:25:56,495 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-04 23:26:23,253 - INFO - memory_manager.py:22 - Short-term memory limit exceeded. Summarizing memory.
2025-06-04 23:26:25,216 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-04 23:26:25,279 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-04 23:26:25,279 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-04 23:26:25,314 - INFO - Agentmain.py:144 - Found 3 similar memories and 2 summaries.
2025-06-04 23:26:25,316 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-04 23:26:25,697 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Hello again, how can I assist you today?' sources=[]
2025-06-04 23:26:25,698 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Hello again, how can I assist you today?' sources=[]
2025-06-04 23:26:25,698 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-04 23:26:25,723 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-04 23:26:25,723 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Hello again, how can I assist you today?' sources=[]
2025-06-04 23:28:43,275 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-04 23:28:43,424 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-04 23:28:43,447 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-04 23:28:43,451 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-04 23:28:56,967 - INFO - memory_manager.py:22 - Short-term memory limit exceeded. Summarizing memory.
2025-06-04 23:28:58,412 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-04 23:28:58,472 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-04 23:28:58,473 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-04 23:28:58,499 - INFO - Agentmain.py:144 - Found 3 similar memories and 2 summaries.
2025-06-04 23:28:58,500 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-04 23:28:58,866 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Hello again, how can I assist you today?' sources=[]
2025-06-04 23:28:58,867 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Hello again, how can I assist you today?' sources=[]
2025-06-04 23:28:58,867 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-04 23:28:58,896 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-04 23:28:58,896 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Hello again, how can I assist you today?' sources=[]
2025-06-05 10:12:55,353 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-05 10:12:55,912 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-05 10:12:56,016 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-05 10:12:56,021 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-05 10:13:23,903 - INFO - memory_manager.py:22 - Short-term memory limit exceeded. Summarizing memory.
2025-06-05 10:13:25,836 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-05 10:13:26,000 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-05 10:13:26,001 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-05 10:13:26,112 - INFO - Agentmain.py:144 - Found 3 similar memories and 2 summaries.
2025-06-05 10:13:26,114 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-05 10:13:28,403 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Hello again, how can I assist you today?' sources=[]
2025-06-05 10:13:28,403 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Hello again, how can I assist you today?' sources=[]
2025-06-05 10:13:28,403 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-05 10:13:28,485 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-05 10:13:28,486 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Hello again, how can I assist you today?' sources=[]
2025-06-05 10:29:44,788 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-05 10:29:45,434 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-05 10:29:45,550 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-05 10:29:45,557 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-05 10:30:16,197 - INFO - memory_manager.py:22 - Short-term memory limit exceeded. Summarizing memory.
2025-06-05 10:30:18,042 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-05 10:30:18,283 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-05 10:30:18,285 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-05 10:30:18,396 - INFO - Agentmain.py:144 - Found 3 similar memories and 2 summaries.
2025-06-05 10:30:18,397 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-05 10:30:19,694 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Hello again, how can I assist you today?' sources=[]
2025-06-05 10:30:19,694 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Hello again, how can I assist you today?' sources=[]
2025-06-05 10:30:19,694 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-05 10:30:19,793 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-05 10:30:19,793 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Hello again, how can I assist you today?' sources=[]
2025-06-05 10:31:28,244 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-05 10:31:28,605 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-05 10:31:28,641 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-05 10:31:28,645 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-05 10:32:06,424 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-05 10:32:06,424 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-05 10:32:06,512 - INFO - Agentmain.py:144 - Found 1 similar memories and 0 summaries.
2025-06-05 10:32:06,513 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-05 10:32:07,546 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Hello, how are you?' sources=[]
2025-06-05 10:32:07,546 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Hello, how are you?' sources=[]
2025-06-05 10:32:07,547 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-05 10:32:07,644 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-05 10:32:07,644 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Hello, how are you?' sources=[]
2025-06-05 10:43:31,354 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-05 10:43:31,811 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-05 10:43:31,876 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-05 10:43:31,883 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-05 10:44:54,090 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-05 10:44:54,383 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-05 10:44:54,417 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-05 10:44:54,423 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-05 10:50:04,174 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-05 10:50:04,179 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-05 10:50:04,260 - INFO - Agentmain.py:144 - Found 1 similar memories and 0 summaries.
2025-06-05 10:50:04,260 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-05 10:50:06,511 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="Hello! It's nice to meet you. Is there something I can help you with or would you like to chat?" sources=[]
2025-06-05 10:50:06,511 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="Hello! It's nice to meet you. Is there something I can help you with or would you like to chat?" sources=[]
2025-06-05 10:50:06,515 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-05 10:50:06,648 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-05 10:50:06,648 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="Hello! It's nice to meet you. Is there something I can help you with or would you like to chat?" sources=[]
2025-06-05 10:50:45,732 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-05 10:50:45,733 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-05 10:50:45,789 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-05 10:50:45,789 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-05 10:50:47,405 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="Hello Devanshu, it's nice to meet you again. Is there something I can help you with or would you like to chat?" sources=[]
2025-06-05 10:50:47,405 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="Hello Devanshu, it's nice to meet you again. Is there something I can help you with or would you like to chat?" sources=[]
2025-06-05 10:50:47,405 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-05 10:50:47,489 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-05 10:50:47,489 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="Hello Devanshu, it's nice to meet you again. Is there something I can help you with or would you like to chat?" sources=[]
2025-06-05 10:52:26,626 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-05 10:52:26,627 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-05 10:52:26,713 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-05 10:52:26,715 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-05 10:52:27,630 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='wikipedia' tool_query='Lord Krishna' response=None sources=[]
2025-06-05 10:52:27,630 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='wikipedia' tool_query='Lord Krishna' response=None sources=[]
2025-06-05 10:52:27,630 - INFO - Agentmain.py:400 - Decided next tool: wikipedia
2025-06-05 10:52:27,637 - INFO - Agentmain.py:449 - Entered Wikipedia Search Node
2025-06-05 10:52:31,563 - INFO - Agentmain.py:467 - Structured Wikipedia summary: summary="Page: Krishna\nSummary: Krishna (; Sanskrit: कृष्ण, IAST: Kṛṣṇa [ˈkr̩ʂɳɐ])  is a major deity in Hinduism. He is worshipped as the eighth avatar of Vishnu and also as the Supreme God in his own right. He is the god of protection, compassion, tenderness, and love; and is widely revered among Hindu divinities. Krishna's birthday is celebrated every year by Hindus on Krishna Janmashtami according to the lunisolar Hindu calendar, which falls in late August or early September of the Gregorian calendar.\nThe anecdotes and narratives of Krishna's life are generally titled as Krishna Līlā. He is a central figure in the Mahabharata, the Bhagavata Purana, the Brahma Vaivarta Purana, and the Bhagavad Gita, and is mentioned in many Hindu philosophical, theological, and mythological texts. They portray him in various perspectives: as a god-child, a prankster, a model lover, a divine hero, and the universal supreme being. His iconography reflects these legends and shows him in different stages of his life, such as an infant eating butter, a young boy playing a flute, a handsome youth with Radha or surrounded by female devotees, or a friendly charioteer giving counsel to Arjuna.\nThe name and synonyms of Krishna have been traced to 1st millennium BCE literature and cults. In some sub-traditions, like Krishnaism, Krishna is worshipped as the Supreme God and Svayam Bhagavan (God Himself). These sub-traditions arose in the context of the medieval era Bhakti movement. Krishna-related literature has inspired numerous performance arts such as Bharatanatyam, Kathakali, Kuchipudi, Odissi, and Manipuri dance. He is a pan-Hindu god, but is particularly revered in some locations, such as Vrindavan in Uttar Pradesh, Dwarka and Junagadh in Gujarat; the Jagannatha aspect in Odisha, Mayapur in West Bengal; in the form of Vithoba in Pandharpur, Maharashtra, Shrinathji at Nathdwara in Rajasthan, Udupi Krishna in Karnataka, Parthasarathy in Tamil Nadu, Aranmula and Guruvayoorappan (Guruvayoor) in Keral" page_title=None url=None
2025-06-05 10:52:31,563 - INFO - Agentmain.py:470 - Wikipedia summary retrieved: Page: Krishna
Summary: Krishna (; Sanskrit: कृष्ण, IAST: Kṛṣṇa [ˈkr̩ʂɳɐ])  is a major deity in Hinduism. He is worshipped as the eighth avatar of Vishnu and also as the Supreme God in his own right. He is the god of protection, compassion, tenderness, and love; and is widely revered among Hindu divinities. Krishna's birthday is celebrated every year by Hindus on Krishna Janmashtami according to the lunisolar Hindu calendar, which falls in late August or early September of the Gregorian calendar.
The anecdotes and narratives of Krishna's life are generally titled as Krishna Līlā. He is a central figure in the Mahabharata, the Bhagavata Purana, the Brahma Vaivarta Purana, and the Bhagavad Gita, and is mentioned in many Hindu philosophical, theological, and mythological texts. They portray him in various perspectives: as a god-child, a prankster, a model lover, a divine hero, and the universal supreme being. His iconography reflects these legends and shows him in different stages of his life, such as an infant eating butter, a young boy playing a flute, a handsome youth with Radha or surrounded by female devotees, or a friendly charioteer giving counsel to Arjuna.
The name and synonyms of Krishna have been traced to 1st millennium BCE literature and cults. In some sub-traditions, like Krishnaism, Krishna is worshipped as the Supreme God and Svayam Bhagavan (God Himself). These sub-traditions arose in the context of the medieval era Bhakti movement. Krishna-related literature has inspired numerous performance arts such as Bharatanatyam, Kathakali, Kuchipudi, Odissi, and Manipuri dance. He is a pan-Hindu god, but is particularly revered in some locations, such as Vrindavan in Uttar Pradesh, Dwarka and Junagadh in Gujarat; the Jagannatha aspect in Odisha, Mayapur in West Bengal; in the form of Vithoba in Pandharpur, Maharashtra, Shrinathji at Nathdwara in Rajasthan, Udupi Krishna in Karnataka, Parthasarathy in Tamil Nadu, Aranmula and Guruvayoorappan (Guruvayoor) in Keral
2025-06-05 10:52:31,638 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-05 10:52:31,638 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-05 10:52:31,690 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-05 10:52:31,706 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-05 10:52:31,706 - INFO - Agentmain.py:262 - Message to LLM: 
You are an AI assistant that helps summarize factual information obtained from Wikipedia.

The following content has been retrieved from Wikipedia in response to a user's query. Your task is to analyze this content and generate a clear, concise, and factual answer in 2-3 sentences that directly addresses the user's query.

If irrelevant or insufficient, respond: "No relevant information could be found on Wikipedia."


IMPORTANT:
- Respond with a JSON object: "tool", "tool_query", "response", "sources".
- Set "tool" to "end"
- Set "tool_query" to null
- Place your answer in "response"
- Use an empty list `[]` for "sources" if none

Do not add comments or extra text.                          

Previous assistant response: tool='wikipedia' tool_query='Lord Krishna' response=None sources=[]

Wikipedia content: Page: Krishna
Summary: Krishna (; Sanskrit: कृष्ण, IAST: Kṛṣṇa [ˈkr̩ʂɳɐ])  is a major deity in Hinduism. He is worshipped as the eighth avatar of Vishnu and also as the Supreme God in his own right. He is the god of protection, compassion, tenderness, and love; and is widely revered among Hindu divinities. Krishna's birthday is celebrated every year by Hindus on Krishna Janmashtami according to the lunisolar Hindu calendar, which falls in late August or early September of the Gregorian calendar.
The anecdotes and narratives of Krishna's life are generally titled as Krishna Līlā. He is a central figure in the Mahabharata, the Bhagavata Purana, the Brahma Vaivarta Purana, and the Bhagavad Gita, and is mentioned in many Hindu philosophical, theological, and mythological texts. They portray him in various perspectives: as a god-child, a prankster, a model lover, a divine hero, and the universal supreme being. His iconography reflects these legends and shows him in different stages of his life, such as an infant eating butter, a young boy playing a flute, a handsome youth with Radha or surrounded by female devotees, or a friendly charioteer giving counsel to Arjuna.
The name and synonyms of Krishna have been traced to 1st millennium BCE literature and cults. In some sub-traditions, like Krishnaism, Krishna is worshipped as the Supreme God and Svayam Bhagavan (God Himself). These sub-traditions arose in the context of the medieval era Bhakti movement. Krishna-related literature has inspired numerous performance arts such as Bharatanatyam, Kathakali, Kuchipudi, Odissi, and Manipuri dance. He is a pan-Hindu god, but is particularly revered in some locations, such as Vrindavan in Uttar Pradesh, Dwarka and Junagadh in Gujarat; the Jagannatha aspect in Odisha, Mayapur in West Bengal; in the form of Vithoba in Pandharpur, Maharashtra, Shrinathji at Nathdwara in Rajasthan, Udupi Krishna in Karnataka, Parthasarathy in Tamil Nadu, Aranmula and Guruvayoorappan (Guruvayoor) in Keral

2025-06-05 10:52:32,468 - INFO - Agentmain.py:265 - Structured response from LLM: tool='end' tool_query=None response='Krishna is a major deity in Hinduism and is worshipped as the eighth avatar of Vishnu and also as the Supreme God in his own right. He is the god of protection, compassion, tenderness, and love, and is widely revered among Hindu divinities. His birthday is celebrated every year by Hindus on Krishna Janmashtami, which falls in late August or early September of the Gregorian calendar.' sources=[]
2025-06-05 10:52:32,600 - INFO - Agentmain.py:397 - Handled tool response for end
2025-06-05 10:52:32,790 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-05 10:52:32,791 - INFO - Agentmain.py:648 - Using LLM-provided final response: Krishna is a major deity in Hinduism and is worshipped as the eighth avatar of Vishnu and also as the Supreme God in his own right. He is the god of protection, compassion, tenderness, and love, and is widely revered among Hindu divinities. His birthday is celebrated every year by Hindus on Krishna Janmashtami, which falls in late August or early September of the Gregorian calendar.
2025-06-05 10:56:52,335 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-05 10:56:52,621 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-05 10:56:52,663 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-05 10:56:52,663 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-05 10:58:08,408 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-05 10:58:08,408 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-05 10:58:08,478 - INFO - Agentmain.py:144 - Found 1 similar memories and 0 summaries.
2025-06-05 10:58:08,478 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-05 10:58:09,384 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Hello, how can I assist you today?' sources=[]
2025-06-05 10:58:09,390 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Hello, how can I assist you today?' sources=[]
2025-06-05 10:58:09,391 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-05 10:58:09,463 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-05 10:58:09,463 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Hello, how can I assist you today?' sources=[]
2025-06-05 10:58:31,574 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-05 10:58:31,574 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-05 10:58:31,643 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-05 10:58:31,644 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-05 10:58:32,902 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="Hello Devanshu Singh, it's nice to meet you again!" sources=[]
2025-06-05 10:58:32,904 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="Hello Devanshu Singh, it's nice to meet you again!" sources=[]
2025-06-05 10:58:32,904 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-05 10:58:32,977 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-05 10:58:32,979 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="Hello Devanshu Singh, it's nice to meet you again!" sources=[]
2025-06-05 10:59:06,569 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-05 10:59:06,569 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-05 10:59:06,637 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-05 10:59:06,637 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-05 10:59:07,206 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='wikipedia' tool_query='Lord Krishna' response=None sources=[]
2025-06-05 10:59:07,208 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='wikipedia' tool_query='Lord Krishna' response=None sources=[]
2025-06-05 10:59:07,209 - INFO - Agentmain.py:400 - Decided next tool: wikipedia
2025-06-05 10:59:07,215 - INFO - Agentmain.py:449 - Entered Wikipedia Search Node
2025-06-05 10:59:10,602 - INFO - Agentmain.py:467 - Structured Wikipedia summary: summary="Page: Krishna\nSummary: Krishna (; Sanskrit: कृष्ण, IAST: Kṛṣṇa [ˈkr̩ʂɳɐ])  is a major deity in Hinduism. He is worshipped as the eighth avatar of Vishnu and also as the Supreme God in his own right. He is the god of protection, compassion, tenderness, and love; and is widely revered among Hindu divinities. Krishna's birthday is celebrated every year by Hindus on Krishna Janmashtami according to the lunisolar Hindu calendar, which falls in late August or early September of the Gregorian calendar.\nThe anecdotes and narratives of Krishna's life are generally titled as Krishna Līlā. He is a central figure in the Mahabharata, the Bhagavata Purana, the Brahma Vaivarta Purana, and the Bhagavad Gita, and is mentioned in many Hindu philosophical, theological, and mythological texts. They portray him in various perspectives: as a god-child, a prankster, a model lover, a divine hero, and the universal supreme being. His iconography reflects these legends and shows him in different stages of his life, such as an infant eating butter, a young boy playing a flute, a handsome youth with Radha or surrounded by female devotees, or a friendly charioteer giving counsel to Arjuna.\nThe name and synonyms of Krishna have been traced to 1st millennium BCE literature and cults. In some sub-traditions, like Krishnaism, Krishna is worshipped as the Supreme God and Svayam Bhagavan (God Himself). These sub-traditions arose in the context of the medieval era Bhakti movement. Krishna-related literature has inspired numerous performance arts such as Bharatanatyam, Kathakali, Kuchipudi, Odissi, and Manipuri dance. He is a pan-Hindu god, but is particularly revered in some locations, such as Vrindavan in Uttar Pradesh, Dwarka and Junagadh in Gujarat; the Jagannatha aspect in Odisha, Mayapur in West Bengal; in the form of Vithoba in Pandharpur, Maharashtra, Shrinathji at Nathdwara in Rajasthan, Udupi Krishna in Karnataka, Parthasarathy in Tamil Nadu, Aranmula and Guruvayoorappan (Guruvayoor) in Keral" page_title=None url=None
2025-06-05 10:59:10,604 - INFO - Agentmain.py:470 - Wikipedia summary retrieved: Page: Krishna
Summary: Krishna (; Sanskrit: कृष्ण, IAST: Kṛṣṇa [ˈkr̩ʂɳɐ])  is a major deity in Hinduism. He is worshipped as the eighth avatar of Vishnu and also as the Supreme God in his own right. He is the god of protection, compassion, tenderness, and love; and is widely revered among Hindu divinities. Krishna's birthday is celebrated every year by Hindus on Krishna Janmashtami according to the lunisolar Hindu calendar, which falls in late August or early September of the Gregorian calendar.
The anecdotes and narratives of Krishna's life are generally titled as Krishna Līlā. He is a central figure in the Mahabharata, the Bhagavata Purana, the Brahma Vaivarta Purana, and the Bhagavad Gita, and is mentioned in many Hindu philosophical, theological, and mythological texts. They portray him in various perspectives: as a god-child, a prankster, a model lover, a divine hero, and the universal supreme being. His iconography reflects these legends and shows him in different stages of his life, such as an infant eating butter, a young boy playing a flute, a handsome youth with Radha or surrounded by female devotees, or a friendly charioteer giving counsel to Arjuna.
The name and synonyms of Krishna have been traced to 1st millennium BCE literature and cults. In some sub-traditions, like Krishnaism, Krishna is worshipped as the Supreme God and Svayam Bhagavan (God Himself). These sub-traditions arose in the context of the medieval era Bhakti movement. Krishna-related literature has inspired numerous performance arts such as Bharatanatyam, Kathakali, Kuchipudi, Odissi, and Manipuri dance. He is a pan-Hindu god, but is particularly revered in some locations, such as Vrindavan in Uttar Pradesh, Dwarka and Junagadh in Gujarat; the Jagannatha aspect in Odisha, Mayapur in West Bengal; in the form of Vithoba in Pandharpur, Maharashtra, Shrinathji at Nathdwara in Rajasthan, Udupi Krishna in Karnataka, Parthasarathy in Tamil Nadu, Aranmula and Guruvayoorappan (Guruvayoor) in Keral
2025-06-05 10:59:10,662 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-05 10:59:10,662 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-05 10:59:10,734 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-05 10:59:10,735 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-05 10:59:10,741 - INFO - Agentmain.py:262 - Message to LLM: 
You are an AI assistant that helps summarize factual information obtained from Wikipedia.

The following content has been retrieved from Wikipedia in response to a user's query. Your task is to analyze this content and generate a clear, concise, and factual answer in 2-3 sentences that directly addresses the user's query.

If irrelevant or insufficient, respond: "No relevant information could be found on Wikipedia."


IMPORTANT:
- Respond with a JSON object: "tool", "tool_query", "response", "sources".
- Set "tool" to "end"
- Set "tool_query" to null
- Place your answer in "response"
- Use an empty list `[]` for "sources" if none

Do not add comments or extra text.                          

Previous assistant response: tool='wikipedia' tool_query='Lord Krishna' response=None sources=[]

Wikipedia content: Page: Krishna
Summary: Krishna (; Sanskrit: कृष्ण, IAST: Kṛṣṇa [ˈkr̩ʂɳɐ])  is a major deity in Hinduism. He is worshipped as the eighth avatar of Vishnu and also as the Supreme God in his own right. He is the god of protection, compassion, tenderness, and love; and is widely revered among Hindu divinities. Krishna's birthday is celebrated every year by Hindus on Krishna Janmashtami according to the lunisolar Hindu calendar, which falls in late August or early September of the Gregorian calendar.
The anecdotes and narratives of Krishna's life are generally titled as Krishna Līlā. He is a central figure in the Mahabharata, the Bhagavata Purana, the Brahma Vaivarta Purana, and the Bhagavad Gita, and is mentioned in many Hindu philosophical, theological, and mythological texts. They portray him in various perspectives: as a god-child, a prankster, a model lover, a divine hero, and the universal supreme being. His iconography reflects these legends and shows him in different stages of his life, such as an infant eating butter, a young boy playing a flute, a handsome youth with Radha or surrounded by female devotees, or a friendly charioteer giving counsel to Arjuna.
The name and synonyms of Krishna have been traced to 1st millennium BCE literature and cults. In some sub-traditions, like Krishnaism, Krishna is worshipped as the Supreme God and Svayam Bhagavan (God Himself). These sub-traditions arose in the context of the medieval era Bhakti movement. Krishna-related literature has inspired numerous performance arts such as Bharatanatyam, Kathakali, Kuchipudi, Odissi, and Manipuri dance. He is a pan-Hindu god, but is particularly revered in some locations, such as Vrindavan in Uttar Pradesh, Dwarka and Junagadh in Gujarat; the Jagannatha aspect in Odisha, Mayapur in West Bengal; in the form of Vithoba in Pandharpur, Maharashtra, Shrinathji at Nathdwara in Rajasthan, Udupi Krishna in Karnataka, Parthasarathy in Tamil Nadu, Aranmula and Guruvayoorappan (Guruvayoor) in Keral

2025-06-05 10:59:11,389 - INFO - Agentmain.py:265 - Structured response from LLM: tool='end' tool_query=None response="Lord Krishna is a major deity in Hinduism and is worshipped as the eighth avatar of Vishnu and the Supreme God in his own right. He is the god of protection, compassion, tenderness, and love, and is widely revered among Hindu divinities. Krishna's life and anecdotes are described in several Hindu texts, including the Mahabharata and the Bhagavata Purana." sources=[]
2025-06-05 10:59:11,515 - INFO - Agentmain.py:397 - Handled tool response for end
2025-06-05 10:59:11,705 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-05 10:59:11,706 - INFO - Agentmain.py:648 - Using LLM-provided final response: Lord Krishna is a major deity in Hinduism and is worshipped as the eighth avatar of Vishnu and the Supreme God in his own right. He is the god of protection, compassion, tenderness, and love, and is widely revered among Hindu divinities. Krishna's life and anecdotes are described in several Hindu texts, including the Mahabharata and the Bhagavata Purana.
2025-06-05 10:59:33,319 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-05 10:59:33,319 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-05 10:59:33,378 - INFO - Agentmain.py:144 - Found 3 similar memories and 0 summaries.
2025-06-05 10:59:33,378 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-05 10:59:35,867 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='news' tool_query='latest war news' response=None sources=[]
2025-06-05 10:59:35,867 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='news' tool_query='latest war news' response=None sources=[]
2025-06-05 10:59:35,867 - INFO - Agentmain.py:400 - Decided next tool: news
2025-06-05 10:59:35,867 - INFO - Agentmain.py:495 - Entered News Summary Node
2025-06-05 10:59:39,552 - INFO - Agentmain.py:533 - Structured News summary: summary='### [Russia-Ukraine war updates: Kyiv, Moscow agree to POW exchange](/news/liveblog/2025/6/2/live-ukraine-russia-to-hold-talks-in-istanbul-after-kyivs-drone-attacks)\n\nThese were the updates from the Russia-Ukraine war for Monday, June 2, 2025. [...] ![A Ukrainian serviceman of the 30th separate mechanized brigade runs tests flights of a hexacopter drone ahead of battle mission in the eastern Donetsk region on October 22, 2024, amid the Russian invasion of Ukraine. (Photo by Genya SAVILOV / AFP)](/wp-content/uploads/2024/10/AFP__20241023__36KK4BB__v1__HighRes__UkraineRussiaConflictWar-1729735692.jpg?resize=770%2C513&quality=80)\n\n### Russia-Ukraine direct talks: No ceasefire, but what did they agree to? [...] ![Servicemen from the mobile air defence unit of the 115th Separate Mechanized Brigade of the Ukrainian Armed Forces check a combat application for presence of Russian drones during an overnight shift, amid Russia\'s attack on Ukraine, in Kharkiv Region, Ukraine June 1, 2025. REUTERS/Sofiia Gatilova](/wp-content/uploads/2025/06/2025-06-02T103249Z_463897984_RC2XTEALJAK4_RTRMADP_3_UKRAINE-CRISIS-AIR-DEFENCE-1748866564.jpg?resize=270%2C180&quality=80)\nUkrainian President Volodymyr Zelenskiy on Wednesday proposed implementing a ceasefire until a meeting can be arranged with Russian President Vladimir Putin.\nThe post also comes just days after a second round of direct peace talks in Istanbul between the warring sides ended without a major breakthrough, although they agreed to swap more prisoners of war.\n\nUkrainian negotiators said Russia rejected an "unconditional ceasefire" - a key demand of Kyiv and its Western allies including the US.\n\nThe Russian team said they had proposed multi-day ceasefires in "certain areas" of the frontline in Ukraine, although they gave no further details.\n## Russia and Ukraine fail again to agree ceasefire but commit to prisoner swap\n\nThe two warring sides remain far apart on how to end the conflict after a second round of talks in Turkey. [...] ## Russia and Ukraine fail again to agree ceasefire but commit to prisoner swap\n\nThe two warring sides remain far apart on how to end the conflict after a second round of talks in Turkey. [...] # News News\n\n# War in Ukraine\n\n![](https://static.files.bbci.co.uk/bbcdotcom/web/20250529-103858-de9d27ef1-web-2.22.3-1/grey-placeholder.png)\n![An image from footage of Ukraine\'s major drone attack on 1 June](https://ichef.bbci.co.uk/news/480/cpsprodpb/4b75/live/7d2896c0-4170-11f0-835b-310c7b938e84.png.webp)\n\n## Putin will seek revenge for Ukraine drone attack, warns Trump\n\nTrump says a call with the Russian president was a "good conversation" but would not lead to "immediate peace".\n![Ukraine\'s Zelenskyy wants face-to-face talks with Putin but the Russian leader shows no readiness](https://static.independent.co.uk/2025/06/04/16/Russia_Ukraine_War_35113.jpg?quality=75&width=230&auto=webp)\n![Operation Spiderweb: Satellite imagery shows Russian bombers destroyed in massive Ukrainian drone attack](https://static.independent.co.uk/2025/06/04/8/40/Combination-picture-shows-satellite-images-of-the-Belaya-airfield-in-Irkutsk-region-ldo9n4dz.jpeg?quality=75&width=230&auto=webp) [...] ## Stay up to date with notifications from The\xa0Independent\n\nNotifications can be managed in browser preferences.\n\n### Thank you for registering\n\nPlease refresh the page or navigate to another page on the site to be automatically logged inPlease refresh your browser to be logged in\n\n# Ukraine-Russia war latest: Putin will take revenge for Kyiv’s drone attack, warns Trump after phone call\n\n## Kremlin says Trump told Putin that he was not informed of Ukraine\'s \'Operation Spiderweb\' in advance [...] ![](https://static.independent.co.uk/2025/06/01/21/05/Aftermath-of-a-Russian-attack-in-Zaporizhzhia-qjt2vs0t.jpeg?trim=0,0,0,0&width=1200&height=800&crop=1200:800)\n\n### [Dozens of Russian warplanes destroyed in Ukrainian drone attack, claims Kyiv](https://www.independent.co.uk/news/world/europe/ukraine-drone-attack-russian-bombers-bridge-collapse-b2761725.html)\n\n### Nato boss calls on allies to ‘go further and faster’ on defence spending' sources=['https://www.aljazeera.com/tag/ukraine-russia-crisis/', 'https://www.reuters.com/world/ukraine-russia-war/', 'https://www.bbc.com/news/articles/cx2r108l785o', 'https://www.bbc.com/news/war-in-ukraine', 'https://www.independent.co.uk/news/world/europe/ukraine-russia-war-live-trump-putin-call-drone-attack-map-b2764028.html']
2025-06-05 10:59:39,557 - INFO - Agentmain.py:537 - News summary retrieved: 4133 chars
2025-06-05 10:59:39,559 - INFO - Agentmain.py:561 - Exiting News Summary Node
2025-06-05 10:59:39,619 - INFO - memory_manager.py:22 - Short-term memory limit exceeded. Summarizing memory.
2025-06-05 10:59:40,437 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-05 10:59:40,602 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-05 10:59:40,603 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-05 10:59:40,698 - INFO - Agentmain.py:144 - Found 3 similar memories and 1 summaries.
2025-06-05 10:59:40,699 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-05 10:59:40,707 - INFO - Agentmain.py:262 - Message to LLM: 
You are an AI assistant that helps summarize news information.

The following content has been retrieved in response to a user's query. Your task is to analyze this content and generate a clear, concise, and factual answer in 2-3 sentences that directly addresses the user's query.

If the content is not relevant or no summary can be made, respond with: "No recent news could be found."

IMPORTANT:
- Your output must be a single JSON object with keys: "tool", "tool_query", and "response".
- Set "tool" to "end".
- Set "tool_query" to null.
- Write your answer in the "response" field.
- Use an empty list `[]` for "sources" if none
- **Do NOT include any comments, explanations, or extra text. Only output the JSON object.**

Previous assistant response: tool='news' tool_query='latest war news' response=None sources=[]

News content: ### [Russia-Ukraine war updates: Kyiv, Moscow agree to POW exchange](/news/liveblog/2025/6/2/live-ukraine-russia-to-hold-talks-in-istanbul-after-kyivs-drone-attacks)

These were the updates from the Russia-Ukraine war for Monday, June 2, 2025. [...] ![A Ukrainian serviceman of the 30th separate mechanized brigade runs tests flights of a hexacopter drone ahead of battle mission in the eastern Donetsk region on October 22, 2024, amid the Russian invasion of Ukraine. (Photo by Genya SAVILOV / AFP)](/wp-content/uploads/2024/10/AFP__20241023__36KK4BB__v1__HighRes__UkraineRussiaConflictWar-1729735692.jpg?resize=770%2C513&quality=80)

### Russia-Ukraine direct talks: No ceasefire, but what did they agree to? [...] ![Servicemen from the mobile air defence unit of the 115th Separate Mechanized Brigade of the Ukrainian Armed Forces check a combat application for presence of Russian drones during an overnight shift, amid Russia's attack on Ukraine, in Kharkiv Region, Ukraine June 1, 2025. REUTERS/Sofiia Gatilova](/wp-content/uploads/2025/06/2025-06-02T103249Z_463897984_RC2XTEALJAK4_RTRMADP_3_UKRAINE-CRISIS-AIR-DEFENCE-1748866564.jpg?resize=270%2C180&quality=80)
Ukrainian President Volodymyr Zelenskiy on Wednesday proposed implementing a ceasefire until a meeting can be arranged with Russian President Vladimir Putin.
The post also comes just days after a second round of direct peace talks in Istanbul between the warring sides ended without a major breakthrough, although they agreed to swap more prisoners of war.

Ukrainian negotiators said Russia rejected an "unconditional ceasefire" - a key demand of Kyiv and its Western allies including the US.

The Russian team said they had proposed multi-day ceasefires in "certain areas" of the frontline in Ukraine, although they gave no further details.
## Russia and Ukraine fail again to agree ceasefire but commit to prisoner swap

The two warring sides remain far apart on how to end the conflict after a second round of talks in Turkey. [...] ## Russia and Ukraine fail again to agree ceasefire but commit to prisoner swap

The two warring sides remain far apart on how to end the conflict after a second round of talks in Turkey. [...] # News News

# War in Ukraine

![](https://static.files.bbci.co.uk/bbcdotcom/web/20250529-103858-de9d27ef1-web-2.22.3-1/grey-placeholder.png)
![An image from footage of Ukraine's major drone attack on 1 June](https://ichef.bbci.co.uk/news/480/cpsprodpb/4b75/live/7d2896c0-4170-11f0-835b-310c7b938e84.png.webp)

## Putin will seek revenge for Ukraine drone attack, warns Trump

Trump says a call with the Russian president was a "good conversation" but would not lead to "immediate peace".
![Ukraine's Zelenskyy wants face-to-face talks with Putin but the Russian leader shows no readiness](https://static.independent.co.uk/2025/06/04/16/Russia_Ukraine_War_35113.jpg?quality=75&width=230&auto=webp)
![Operation Spiderweb: Satellite imagery shows Russian bombers destroyed in massive Ukrainian drone attack](https://static.independent.co.uk/2025/06/04/8/40/Combination-picture-shows-satellite-images-of-the-Belaya-airfield-in-Irkutsk-region-ldo9n4dz.jpeg?quality=75&width=230&auto=webp) [...] ## Stay up to date with notifications from The Independent

Notifications can be managed in browser preferences.

### Thank you for registering

Please refresh the page or navigate to another page on the site to be automatically logged inPlease refresh your browser to be logged in

# Ukraine-Russia war latest: Putin will take revenge for Kyiv’s drone attack, warns Trump after phone call

## Kremlin says Trump told Putin that he was not informed of Ukraine's 'Operation Spiderweb' in advance [...] ![](https://static.independent.co.uk/2025/06/01/21/05/Aftermath-of-a-Russian-attack-in-Zaporizhzhia-qjt2vs0t.jpeg?trim=0,0,0,0&width=1200&height=800&crop=1200:800)

### [Dozens of Russian warplanes destroyed in Ukrainian drone attack, claims Kyiv](https://www.independent.co.uk/news/world/europe/ukraine-drone-attack-russian-bombers-bridge-collapse-b2761725.html)

### Nato boss calls on allies to ‘go further and faster’ on defence spending

2025-06-05 10:59:41,391 - INFO - Agentmain.py:265 - Structured response from LLM: tool='end' tool_query=None response='Russia and Ukraine have agreed to a prisoner swap after direct talks in Istanbul, but did not reach a ceasefire agreement. Ukrainian President Volodymyr Zelenskiy proposed a ceasefire until a meeting can be arranged with Russian President Vladimir Putin. The two sides remain far apart on how to end the conflict, with Russia rejecting an unconditional ceasefire and instead proposing multi-day ceasefires in certain areas.' sources=[]
2025-06-05 10:59:41,496 - INFO - Agentmain.py:397 - Handled tool response for end
2025-06-05 10:59:41,676 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-05 10:59:41,677 - INFO - Agentmain.py:648 - Using LLM-provided final response: Russia and Ukraine have agreed to a prisoner swap after direct talks in Istanbul, but did not reach a ceasefire agreement. Ukrainian President Volodymyr Zelenskiy proposed a ceasefire until a meeting can be arranged with Russian President Vladimir Putin. The two sides remain far apart on how to end the conflict, with Russia rejecting an unconditional ceasefire and instead proposing multi-day ceasefires in certain areas.
2025-06-05 11:00:07,622 - INFO - memory_manager.py:22 - Short-term memory limit exceeded. Summarizing memory.
2025-06-05 11:00:13,522 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-05 11:00:13,664 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-05 11:00:13,664 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-05 11:00:13,734 - INFO - Agentmain.py:144 - Found 3 similar memories and 2 summaries.
2025-06-05 11:00:13,734 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-05 11:00:19,828 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="I'm a large language model, my work is to assist and provide information to users through text-based conversations. I can answer questions, provide explanations, and engage in discussions on a wide range of topics." sources=[]
2025-06-05 11:00:19,829 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="I'm a large language model, my work is to assist and provide information to users through text-based conversations. I can answer questions, provide explanations, and engage in discussions on a wide range of topics." sources=[]
2025-06-05 11:00:19,830 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-05 11:00:19,926 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-05 11:00:19,927 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="I'm a large language model, my work is to assist and provide information to users through text-based conversations. I can answer questions, provide explanations, and engage in discussions on a wide range of topics." sources=[]
2025-06-05 11:00:37,900 - INFO - memory_manager.py:22 - Short-term memory limit exceeded. Summarizing memory.
2025-06-05 11:00:41,346 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-05 11:00:41,510 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-05 11:00:41,510 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-05 11:00:41,573 - INFO - Agentmain.py:144 - Found 3 similar memories and 2 summaries.
2025-06-05 11:00:41,573 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-05 11:00:42,318 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Your name is Devanshu Singh.' sources=[]
2025-06-05 11:00:42,318 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Your name is Devanshu Singh.' sources=[]
2025-06-05 11:00:42,326 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-05 11:00:42,385 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-05 11:00:42,385 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Your name is Devanshu Singh.' sources=[]
2025-06-05 19:54:42,785 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-05 19:54:43,015 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-05 19:54:43,055 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-05 19:54:43,059 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-05 19:55:54,649 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-05 19:55:54,783 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-05 19:55:54,803 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-05 19:55:54,806 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-05 19:59:43,619 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-05 19:59:43,824 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-05 19:59:43,875 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-05 19:59:43,880 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-05 20:00:17,112 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-05 20:00:17,213 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-05 20:00:17,227 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-05 20:00:17,230 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-05 20:00:31,258 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-05 20:00:31,361 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-05 20:00:31,375 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-05 20:00:31,378 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-05 20:00:45,303 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-05 20:00:45,422 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-05 20:00:45,436 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-05 20:00:45,440 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-05 20:02:07,676 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-05 20:02:07,835 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-05 20:02:07,865 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-05 20:02:07,865 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-05 20:02:47,100 - INFO - memory_manager.py:22 - Short-term memory limit exceeded. Summarizing memory.
2025-06-05 20:02:48,633 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-05 20:02:48,696 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-05 20:02:48,697 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-05 20:02:48,722 - INFO - Agentmain.py:144 - Found 3 similar memories and 2 summaries.
2025-06-05 20:02:48,722 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-05 20:02:49,322 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Hello again, how can I assist you today?' sources=[]
2025-06-05 20:02:49,324 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Hello again, how can I assist you today?' sources=[]
2025-06-05 20:02:49,324 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-05 20:02:49,354 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-05 20:02:49,354 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Hello again, how can I assist you today?' sources=[]
2025-06-05 20:32:21,999 - INFO - memory_manager.py:22 - Short-term memory limit exceeded. Summarizing memory.
2025-06-05 20:32:23,359 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-05 20:32:23,478 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-05 20:32:23,478 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-05 20:32:23,509 - INFO - Agentmain.py:144 - Found 3 similar memories and 2 summaries.
2025-06-05 20:32:23,509 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-05 20:32:23,918 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Hello again, how can I assist you today?' sources=[]
2025-06-05 20:32:23,919 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Hello again, how can I assist you today?' sources=[]
2025-06-05 20:32:23,919 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-05 20:32:23,948 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-05 20:32:23,948 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Hello again, how can I assist you today?' sources=[]
2025-06-05 20:33:18,300 - INFO - memory_manager.py:22 - Short-term memory limit exceeded. Summarizing memory.
2025-06-05 20:33:19,543 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-05 20:33:19,603 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-05 20:33:19,603 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-05 20:33:19,626 - INFO - Agentmain.py:144 - Found 3 similar memories and 2 summaries.
2025-06-05 20:33:19,627 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-05 20:33:20,063 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Hello again, how can I assist you today?' sources=[]
2025-06-05 20:33:20,063 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Hello again, how can I assist you today?' sources=[]
2025-06-05 20:33:20,064 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-05 20:33:20,092 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-05 20:33:20,092 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Hello again, how can I assist you today?' sources=[]
2025-06-05 20:44:14,351 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-05 20:44:14,579 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-05 20:44:14,624 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-05 20:44:14,628 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-05 20:44:39,466 - INFO - memory_manager.py:22 - Short-term memory limit exceeded. Summarizing memory.
2025-06-05 20:44:41,591 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-05 20:44:41,666 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-05 20:44:41,667 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-05 20:44:41,697 - INFO - Agentmain.py:144 - Found 3 similar memories and 2 summaries.
2025-06-05 20:44:41,698 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-05 20:44:42,107 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Your name is Devanshu Singh.' sources=[]
2025-06-05 20:44:42,107 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Your name is Devanshu Singh.' sources=[]
2025-06-05 20:44:42,107 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-05 20:44:42,131 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-05 20:44:42,132 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Your name is Devanshu Singh.' sources=[]
2025-06-05 20:45:11,642 - INFO - memory_manager.py:22 - Short-term memory limit exceeded. Summarizing memory.
2025-06-05 20:45:13,029 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-05 20:45:13,101 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-05 20:45:13,101 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-05 20:45:13,131 - INFO - Agentmain.py:144 - Found 3 similar memories and 2 summaries.
2025-06-05 20:45:13,132 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-05 20:45:13,521 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='websearch' tool_query='secret of Korean beauty' response=None sources=[]
2025-06-05 20:45:13,521 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='websearch' tool_query='secret of Korean beauty' response=None sources=[]
2025-06-05 20:45:13,522 - INFO - Agentmain.py:400 - Decided next tool: websearch
2025-06-05 20:45:13,525 - INFO - Agentmain.py:574 - Entered Web Search Node
2025-06-05 20:45:16,303 - INFO - Agentmain.py:615 - Retrieved 7 search results
2025-06-05 20:45:16,304 - INFO - Agentmain.py:630 - Web Search completed successfully
2025-06-05 20:45:16,323 - INFO - memory_manager.py:71 - Building conversation context via vector recall...
2025-06-05 20:45:16,323 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-05 20:45:16,355 - INFO - Agentmain.py:144 - Found 3 similar memories and 2 summaries.
2025-06-05 20:45:16,355 - INFO - memory_manager.py:106 - Context history built successfully.
2025-06-05 20:45:16,357 - INFO - Agentmain.py:262 - Message to LLM: 
You are an AI assistant that summarizes web search results.

Based on the following search result snippets, generate a clear and concise 2-3 sentence summary directly addressing the user's query.

If no meaningful results are found, respond with: "No relevant web search results could be found."

IMPORTANT:
- Output a single JSON object with keys: "tool", "tool_query", "response", "sources".
- Set "tool" to "end".
- Set "tool_query" to null.
- Write your summarized answer in the "response" field.
- Use an empty list `[]` for "sources" if none
- **Do NOT include any comments, explanations, or extra text. Only output the JSON object.**

Previous assistant response: tool='websearch' tool_query='secret of Korean beauty' response=None sources=[]

Search results:
11 Korean Beauty Secrets You Should Know, According To Experts · Facial Massage · Multi-Step Skincare Routine · Dewy Skin · Application Method.
Korean skincare: Korean beauty secrets for glass skin · 1. Indulge in a Steam Session · 2. Do Facial Exercises Daily · 3. Follow the Double Cleansing Method · 4 ...
True skin-care enthusiasts will tell you that the secret to achieving smooth, even-toned, dewy skin lies in a 10-step Korean skin-care routine.
Most answers I get are to always hydrate and moisturize your skin. Also, never ever get out of your house unprotected or without sunscreen. They ...
Double Cleanse at Night · Mask Before You Moisturize · Try a Sleeping Pack · Prioritize Your SPF · Switch to Cushion Foundation · Experiment With the ...
Koreans believe your skin deserves a fresh start every night. They use an oil-based cleanser first to melt makeup and dirt, followed by a water- ...
It's 'the gentle patting method' we're talking about. Koreans swear by this technique for achieving that flawless, glass skin. Here's why it's ...

2025-06-05 20:45:16,921 - INFO - Agentmain.py:265 - Structured response from LLM: tool='end' tool_query=None response='The secret to Korean beauty lies in a multi-step skincare routine, which includes double cleansing, facial massage, and moisturizing. Koreans also prioritize sun protection, using SPF and cushion foundation, and believe in giving their skin a fresh start every night. Additionally, techniques like the gentle patting method and facial exercises are also popular for achieving smooth, even-toned, dewy skin.' sources=[]
2025-06-05 20:45:16,973 - INFO - Agentmain.py:397 - Handled tool response for end
2025-06-05 20:45:17,041 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-05 20:45:17,041 - INFO - Agentmain.py:648 - Using LLM-provided final response: The secret to Korean beauty lies in a multi-step skincare routine, which includes double cleansing, facial massage, and moisturizing. Koreans also prioritize sun protection, using SPF and cushion foundation, and believe in giving their skin a fresh start every night. Additionally, techniques like the gentle patting method and facial exercises are also popular for achieving smooth, even-toned, dewy skin.
2025-06-05 20:47:07,246 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-05 20:47:07,438 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-05 20:47:07,470 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-05 20:47:07,473 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-05 22:09:54,110 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-05 22:09:54,366 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-05 22:09:54,405 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-05 22:09:54,409 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-05 22:12:32,321 - INFO - memory_manager.py:23 - Short-term memory limit exceeded. Summarizing memory.
2025-06-05 22:12:35,307 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-05 22:12:35,307 - INFO - memory_manager.py:30 - Saving summary to database...
2025-06-05 22:12:35,387 - INFO - memory_manager.py:76 - Building conversation context via vector recall...
2025-06-05 22:12:35,387 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-05 22:12:35,412 - INFO - Agentmain.py:144 - Found 3 similar memories and 2 summaries.
2025-06-05 22:12:35,413 - INFO - memory_manager.py:111 - Context history built successfully.
2025-06-05 22:12:35,841 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Hello! How can I assist you today?' sources=[]
2025-06-05 22:12:35,842 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Hello! How can I assist you today?' sources=[]
2025-06-05 22:12:35,842 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-05 22:12:35,874 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-05 22:12:35,874 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Hello! How can I assist you today?' sources=[]
2025-06-05 22:15:24,383 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-05 22:15:24,504 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-05 22:15:24,522 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-05 22:15:24,525 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-05 22:15:38,685 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-05 22:15:38,787 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-05 22:15:38,803 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-05 22:15:38,806 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-05 22:15:52,492 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-05 22:15:52,608 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-05 22:15:52,621 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-05 22:15:52,623 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-05 22:16:08,078 - INFO - memory_manager.py:23 - Short-term memory limit exceeded. Summarizing memory.
2025-06-05 22:16:09,573 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-05 22:16:09,574 - INFO - memory_manager.py:30 - Saving summary to database...
2025-06-05 22:16:09,645 - INFO - memory_manager.py:76 - Building conversation context via vector recall...
2025-06-05 22:16:09,645 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-05 22:16:09,677 - INFO - Agentmain.py:144 - Found 3 similar memories and 2 summaries.
2025-06-05 22:16:09,678 - INFO - memory_manager.py:111 - Context history built successfully.
2025-06-05 22:16:10,063 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Your name is Devanshu Singh.' sources=[]
2025-06-05 22:16:10,064 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Your name is Devanshu Singh.' sources=[]
2025-06-05 22:16:10,064 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-05 22:16:10,088 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-05 22:16:10,088 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Your name is Devanshu Singh.' sources=[]
2025-06-05 22:26:43,272 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-05 22:26:43,489 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-05 22:26:43,526 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-05 22:26:43,529 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-05 22:27:12,161 - INFO - memory_manager.py:23 - Short-term memory limit exceeded. Summarizing memory.
2025-06-05 22:27:13,684 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-05 22:27:13,684 - INFO - memory_manager.py:30 - Saving summary to database...
2025-06-05 22:27:13,761 - INFO - memory_manager.py:76 - Building conversation context via vector recall...
2025-06-05 22:27:13,761 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-05 22:27:13,792 - INFO - Agentmain.py:144 - Found 3 similar memories and 2 summaries.
2025-06-05 22:27:13,793 - INFO - memory_manager.py:111 - Context history built successfully.
2025-06-05 22:27:14,330 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="Hello again, I see you've addressed me as Maddy, but I'm actually an assistant, and you're Devanshu Singh. Is there something I can help you with today?" sources=[]
2025-06-05 22:27:14,330 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="Hello again, I see you've addressed me as Maddy, but I'm actually an assistant, and you're Devanshu Singh. Is there something I can help you with today?" sources=[]
2025-06-05 22:27:14,331 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-05 22:27:14,363 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-05 22:27:14,364 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="Hello again, I see you've addressed me as Maddy, but I'm actually an assistant, and you're Devanshu Singh. Is there something I can help you with today?" sources=[]
2025-06-08 10:02:25,789 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-08 10:02:26,306 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-08 10:02:26,439 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-08 10:02:26,448 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
2025-06-08 10:02:59,284 - INFO - memory_manager.py:23 - Short-term memory limit exceeded. Summarizing memory.
2025-06-08 10:03:00,917 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-08 10:03:00,919 - INFO - memory_manager.py:30 - Saving summary to database...
2025-06-08 10:03:01,129 - INFO - memory_manager.py:76 - Building conversation context via vector recall...
2025-06-08 10:03:01,130 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-08 10:03:01,226 - INFO - Agentmain.py:144 - Found 3 similar memories and 2 summaries.
2025-06-08 10:03:01,226 - INFO - memory_manager.py:111 - Context history built successfully.
2025-06-08 10:03:01,741 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response="I'm an assistant, and I'm currently assisting you with your queries. My primary function is to provide information, answer questions, and engage in text-based conversations." sources=[]
2025-06-08 10:03:01,742 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response="I'm an assistant, and I'm currently assisting you with your queries. My primary function is to provide information, answer questions, and engage in text-based conversations." sources=[]
2025-06-08 10:03:01,743 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-08 10:03:01,837 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-08 10:03:01,838 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response="I'm an assistant, and I'm currently assisting you with your queries. My primary function is to provide information, answer questions, and engage in text-based conversations." sources=[]
2025-06-08 10:03:20,174 - INFO - memory_manager.py:23 - Short-term memory limit exceeded. Summarizing memory.
2025-06-08 10:03:21,675 - INFO - memory_utils.py:25 - ✅ Short-term memory summarization complete.
2025-06-08 10:03:21,676 - INFO - memory_manager.py:30 - Saving summary to database...
2025-06-08 10:03:21,856 - INFO - memory_manager.py:76 - Building conversation context via vector recall...
2025-06-08 10:03:21,856 - INFO - Agentmain.py:129 - Encoding query for vector recall...
2025-06-08 10:03:21,927 - INFO - Agentmain.py:144 - Found 3 similar memories and 2 summaries.
2025-06-08 10:03:21,927 - INFO - memory_manager.py:111 - Context history built successfully.
2025-06-08 10:03:22,345 - INFO - Agentmain.py:168 - LLM raw output (attempt 1): tool='end' tool_query=None response='Your name is Devanshu Singh' sources=[]
2025-06-08 10:03:22,347 - INFO - Agentmain.py:189 - Structured LLM output in decide_tool_for_query: tool='end' tool_query=None response='Your name is Devanshu Singh' sources=[]
2025-06-08 10:03:22,348 - INFO - Agentmain.py:400 - Decided next tool: end
2025-06-08 10:03:22,411 - INFO - Agentmain.py:644 - Final response node reached.
2025-06-08 10:03:22,412 - INFO - Agentmain.py:648 - Using LLM-provided final response: tool='end' tool_query=None response='Your name is Devanshu Singh' sources=[]
2025-06-08 10:17:28,991 - INFO - embedding_manager.py:20 - ✓ Embedding model initialized successfully
2025-06-08 10:17:29,459 - INFO - database_operations.py:100 - ✅ Database connection successful!
2025-06-08 10:17:29,565 - INFO - database_operations.py:143 - ✅ Database tables already exist
2025-06-08 10:17:29,573 - INFO - database_operations.py:161 - ✅ Database initialized successfully!
